ABSTRACT Motivation: The world-wide community of life scientists has access to a large number of public bioinformatics databases and tools, which are developed and deployed using diverse technologies and designs.
More and more of the resources offer programmatic web-service interface.
However, efficient use of the resources is hampered by the lack of widely used, standard data-exchange formats for the basic, everyday bioinformatics data types.
Results: BioXSD has been developed as a candidate for standard, canonical exchange format for basic bioinformatics data.
BioXSD is represented by a dedicated XML Schema and defines syntax for biological sequences, sequence annotations, alignments and references to resources.
We have adapted a set of web services to use BioXSD as the input and output format, and implemented a test-case workflow.
This demonstrates that the approach is feasible and provides smooth interoperability.
Semantics for BioXSD is provided by annotation with the EDAM ontology.
We discuss in a separate section how BioXSD relates to other initiatives and approaches, including existing standards and the Semantic Web.
Availability: The BioXSD 1.0 XML Schema is freely available at http://www.bioxsd.org/BioXSD-1.0.xsd under the Creative Commons BY-ND 3.0 license.
The http://bioxsd.org web page offers documentation, examples of data in BioXSD format, example workflows with source codes in common programming languages, an updated list of compatible web services and tools and a repository of feature requests from the community.
Contact: matus.kalas@bccs.uib.no; developers@bioxsd.org; support@bioxsd.org 1 INTRODUCTION The bioinformatics community shares a common feature with a global business corporation, namely the diversity of IT systems.
A global corporation owns a myriad of IT solutions belonging to its smaller or bigger sub-companies, implemented in diverse ways and covering diverse aspects and business areas of the corporation.
To achieve efficiency within the corporation or consortium, all the IT systems must be able to work together: to inter-operate.
To whom correspondence should be addressed.
In bioinformatics, we do not have any corporate management to force standards for interoperability.
But it is clear that the bioinformatics community would benefit greatly from an IT infrastructure that allows more efficient use of biological data and computational resources, in order to support new exploration and discoveries.
Since the scientific community lacks a centralized authority, the community must develop its standards within collaborative efforts.
In his visionary comment, Lincoln Stein called for standardization in bioinformatics, suggesting web services (http://www.w3.org/ standards/webofservices) as the unifying platform for programmatic interfaces to tools and data sources (Stein, 2002).
Nowadays, the ELIXIR project chooses SOAP web services for programmatic access to all considered bioinformatics databases and tools (http://www.elixir-europe.org/page.php?page=wp7).
The Web Service Interoperability Organisation (WS-I, http://ws-i.org), supported by the main IT companies, constrains even more strictly the W3Cs SOAP-service standards in order to maximize interoperability among the web services and the web-service programmatic libraries.
The EMBRACE project (European Model for Bioinformatics Research and Community Education) has developed guidelines for providing data sources and computational tools that are globally interoperable on the web of services.
The guidelines recommend WS-I compliant web services with document/literal wrapped SOAP binding (Pettifer et al., 2010; Stockinger et al., 2008; technical details in http://www.embracegrid.info/page.php?
page=tech_documents).
Even while following the W3C and WS-I standards, the practical interoperability within the field of bioinformatics web services is compromised by the incompatibility or inconsistency of input and output formats of different services (Hull et al., 2006).
Standard exchange formats have been identified as a necessary key to global interoperation by the ELIXIR and EMBRACE projects, and by the BioHackathon jamboree ( http://hackathon.dbcls.jp).
Developing an XML Schema of standard data-exchange formats, called a canonical data model, is typical within IT-system integration in industry, business and public administration.
The standard formats of the exchanged data enable web-service developers to use them as the input and output data formats, eliminating the need to define their own formats and thus saving development and maintenance The Author(s) 2010.
Published by Oxford University Press.
This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/2.5), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.
[10:55 28/8/2010 Bioinformatics-btq391.tex] Page: i541 i540i546 BioXSD A B C Fig.1.
Three different scenarios of sending data from an output of one web service to an input of another web service.
(A) Plain textual data inside SOAP messages.
Proprietary parsing and serialization, or shims are necessary.
(B) Different XML formats of output of the first service and input of the second.
Translation of data is in general easier but still necessary.
(C) Both services using the same standardized exchange format.
No transformation is necessary and data flow smoothly from one service to another.
costs.
This is especially useful when services are developed in a WSDL-centric fashion, as recommended by EMBRACE.
The biggest advantage of the common standard formats is however for the users of services.
The common, canonical data model gives users the ability to easily mix-and-match diverse web services into custom analysis pipelines: workflows.
Workflows are developed using either ordinary programming or scripting languages, or specialized workflow tools like Taverna (Hull et al., 2006) or workflow languages like BPEL (http://docs.oasis-open .org/wsbpel/2.0/wsbpel-v2.0.html).
The use of standard canonical formats diminishes the need to translate data between different formats of the output and input of the various tools.
Such translations normally require custom parsers or development of predefined transformers, referred to as shims (Hull et al., 2004).
The various scenarios of mix-and-matching different web services are illustrated in Figure 1.
A standard, canonical format of the exchanged data simplifies workflow development, and reduces the effort of developing and tailoring analysis pipelines.
Standard exchange formats aim to save time and resources, and decrease the needs for specialized personnel with advanced programming skills.
Data formats can be defined in several alternative ways.
XML Schema (XSD, http://www.w3.org/standards/techs/xmlschema) is a formal language for defining data types and their formats.
XSD defines the structure of data objects, restricts the allowed values of atomic data and defines specialization and inclusion relations on the data types.
XML Schema is primarily used to define the structure of XML documents, SOAP messages, or, from the web-service perspective, the data objects.
Not limited to define XML formats, XSD can also be used to define object data models for object-oriented programming languages.
The source code needed to define the data objects in the chosen programming language can be automatically generated from the particular Schema using ordinary tools.
When used for so-called marshalling and unmarshalling of objects between their XML-serialized representation and the computer-memory representation, such a framework is called a data binding.
Due to a Schema and the data binding, we can abstract from the textual XML appearance of the exchanged data, and regard it as a medium for directly transferring data objects.
A number of industry-supported tools are available for parsing, validating or translating XML data corresponding to a defined XML Schema.
If a Schema describes the data format at an appropriately detailed level, these widely available frameworks provide us with useful functionality.
This includes automatic validation of the data ensuring that our tools receive only valid inputs, thus improving the security for the providers and eliminating senseless invocations and the need for validating the input in the source code.
Data validation thus lowers the burden for the tool provider and increases the usability for the user.
Detailed Schemas eliminate the need for writing and maintaining special parsers for each type and format of data, making the inputs and outputs parsed on arrival, unmarshalled into the data-binding objects.
Selection and projection, or translation among different formats is simplified.
A detailed XSD makes it possible to semantically annotate details of data formats using the SAWSDL standard (Semantic Annotation for WSDL and XML Schema, http://www.w3.org/standards/techs/sawsdl).
The detailed XSD can also help develop or even generate comprehensive graphical user interfaces for editing data and invoking services.
In addition, very efficient compression of data can be achieved by Schema-aware compression tools which use the constraining XML Schema to provide the minimum binary encoding of the data.
Examples of such frameworks are emerging (Augeri et al., 2007), and their adoption will be crucial for the increasingly data-intensive bioinformatics, for instance related to high-throughput sequencing.
Initiated by the EMBRACE project partners, we have developed BioXSD.
BioXSD is the candidate for a reasonably lightweight, but formal and detailed, standard XML exchange format of commonly used, everyday bioinformatics data.
BioXSD makes web services i541 [10:55 28/8/2010 Bioinformatics-btq391.tex] Page: i542 i540i546 M. Kala et al.
easily interoperable and markedly simplifies the construction of workflows.
The following section briefly summarizes related work and approaches, and discusses their relationship with BioXSD.
Section 3 describes the BioXSD development and summarizes the design principles.
Section 4 describes the developed BioXSD formats and their highlights.
It also presents a feasibility test of BioXSD adoption by web services and a case-study client workflow.
Section 5 concludes the article.
2 RELATED EFFORTS AND APPROACHES In this section, we introduce previous efforts, related and alternative approaches and discuss their relationship with BioXSD.
2.1 Specialized standard formats Standardized XML data-exchange formats do exist for specialized sub-domains of bioinformatics and the data types in focus.
Examples are SBML for systems-biology models (Hucka et al., 2003), PDBML for structural bioinformatics (Westbrook et al., 2005), The HUPO PSIs Molecular Interaction format (MIF; Hermjakob et al., 2004), or phyloXML (Han and Zmasek, 2009) and NeXML (http://www.nexml.org) for phylogenetic data.
The Minimum Information standards for different fields of experimental molecular biology often include an XML Schema of the data-exchange format: for example MAGE-ML in MIAME (Spellman et al., 2002) or GCDML in MIGS/MIMS (Kottmann et al., 2008).
The scope of BioXSD is to offer standard exchange formats for the common bioinformatics data not covered by these specialized, mostly heavyweight standards.
We encourage using the big standards for data exchange always when applicable, and BioXSD for the exchange of common, everyday bioinformatics data like sequences, alignments, references and unified generic sequence annotations.
2.2 XML formats for common bioinformatics DAS (Distributed Annotation System; Prlic et al., 2007) and BioMoby (Wilkinson and Links, 2002) are web-based, service-oriented bioinformatics infrastructures, enabling interoperability across distributed resources.
To ensure the interoperability within the infrastructure, they include a set of common XML formats.
In BioMoby, it is an open library of data types and formats, and in DAS it is a set of lightweight formats for sequences and annotation data.
The family of HOBIT XML Schemas developed by the Helmholz Open BioInformatics Technology project (HOBIT) has defined common XML formats of everyday bioinformatics data types.
These are used among web services within a set of German bioinformatics research institutes (Seibel et al., 2006).
HOBIT XML defines a substantial number of types spread over multiple XSDs, which are programmatically accessible using a dedicated Java library (BioDOM).
The CBS Common Data Typeshave been in use among web services at the Center for Biological Sequence analysis (CBS) at the Technical University of Denmark and at EMBL, Heidelberg (http://www.cbs.dtu.dk/ws/doc/datatypes.php).
They constitute a couple of lightweight XML data formats including ones corresponding to the FASTA format and a subset of General Feature Format (GFF, http://www.sanger.ac.uk/resources/software/gff).
The CBS-EMBL data model has served as one of the starting points for the development of BioXSD.
2.3 Semantic web Semantic web standards offer alternative languages to define a data format in a formal way.
For example BioPAX (http://www.biopax.org), the common exchange format for biological pathways, is defined in OWL (http://www.w3.org/standards/techs/ owl).
Some semantic web-service-oriented architectures propose using a canonical reference ontology instead of a canonical XML Schema, and perform lifting and lowering of the output and input data through data individuals of the reference ontology.
However, to achieve the main goal of BioXSD and EMBRACE, namely interoperable programmatic access, we have opted for a combined approach of a pure XML Schema annotated by a data-type ontology using SAWSDL.
This ensures the practical usability by presently mature common tools proven by an extensive industrial use, including the simple interoperability with programming languages using the ordinary SOAP libraries.
For similar reasons, we do not model data annotations and resources using RDF (http://www.w3.org/standards/techs/rdf).
RDF use will be considered for future versions of BioXSD after evaluating the progressed maturity and user-friendliness of the necessary frameworks.
