BIOINFORMATICS APPLICATIONS NOTE Vol.
25 no.
16 2009, pages 2078 2079  doi:10.1093/bioinformatics/btp352  Sequence analysis The Sequence Alignment/Map format and SAMtools Heng Li1, , Bob Handsaker2, , Alec Wysoker2, Tim Fennell2, Jue Ruan3, Nils Homer4, Gabor Marth5, Goncalo Abecasis6, Richard Durbin1,  and 1000 Genome Project Data Processing Subgroup7 1Wellcome Trust Sanger Institute, Wellcome Trust Genome Campus, Cambridge, CB10 1SA, UK, 2Broad Institute of MIT and Harvard, Cambridge, MA 02141, USA, 3Beijing Institute of Genomics, Chinese Academy of Science, Beijing 100029, China, 4Department of Computer Science, University of California Los Angeles, Los Angeles, CA 90095, 5Department of Biology, Boston College, Chestnut Hill, MA 02467, 6Center for Statistical Genetics, Department of Biostatistics, University of Michigan, Ann Arbor, MI 48109, USA and 7http://1000genomes.org Received on April 28, 2009  revised on May 28, 2009  accepted on May 30, 2009 Advance Access publication June 8, 2009 Associate Editor: Alfonso Valencia  format  ABSTRACT Summary: The Sequence Alignment/Map (SAM) format is a generic alignment for storing read alignments against reference sequences, supporting short and long reads (up to 128 Mbp) produced by different sequencing platforms.
It is ﬂexible in style, compact in size, efﬁcient in random access and is the format in which alignments from the 1000 Genomes Project are released.
SAMtools implements various utilities for post-processing alignments in the SAM format, such as indexing, variant caller and alignment viewer, and thus provides universal tools for processing read alignments.
Availability: http://samtools.sourceforge.net Contact: rd@sanger.ac.uk  1 INTRODUCTION With the advent of novel sequencing technologies such as Illumina/Solexa, AB/SOLiD and Roche/454 (Mardis, 2008), a variety of new alignment tools (Langmead et al., 2009  Li et al., 2008) have been designed to realize efﬁcient read mapping against large reference sequences, including the human genome.
These tools generate alignments in different formats, however, complicating downstream processing.
A common alignment format that supports all sequence types and aligners creates a well-deﬁned interface between alignment and downstream analyses, including variant detection, genotyping and assembly.
The Sequence Alignment/Map (SAM) format is designed to achieve this goal.
It supports single- and paired-end reads and combining reads of different types, including color space reads from AB/SOLiD.
It is designed to scale to alignment sets of 1011 or more base pairs, which is typical for the deep resequencing of one human individual.
In this article, we present an overview of the SAM format and brieﬂy introduce the companion SAMtools software package.
A detailed format speciﬁcation and the complete documentation of SAMtools are available at the SAMtools web site.
To whom correspondence should be addressed.
The authors wish it to be known that, in their opinion, the ﬁrst two authors should be regarded as Joint First Authors.
2 METHODS 2.1 The SAM format 2.1.1 Overview of the SAM format The SAM format consists of one header section and one alignment section.
The lines in the header section start with character  @ , and lines in the alignment section do not.
All lines are TAB delimited.
An example is shown in Figure 1b.
In SAM, each alignment line has 11 mandatory ﬁelds and a variable number of optional ﬁelds.
The mandatory ﬁelds are brieﬂy described in Table 1.
They must be present but their value can be a  * or a zero (depending on the ﬁeld) if the corresponding information is unavailable.
The optional ﬁelds are presented as key-value pairs in the format of TAG:TYPE:VALUE.
They store extra information from the platform or aligner.
For example, the  RG  tag keeps the  read group  information for each read.
In combination with the  @RG  header lines, this tag allows each read to be labeled with metadata about its origin, sequencing center and library.
The SAM format speciﬁcation gives a detailed description of each ﬁeld and the predeﬁned TAGs.
2.1.2 Extended CIGAR The standard CIGAR description of pairwise alignment deﬁnes three operations:  M  for match/mismatch,  I  for insertion compared with the reference and  D  for deletion.
The extended CIGAR proposed in SAM added four more operations:  N  for skipped bases on the reference,  S  for soft clipping,  H  for hard clipping and  P  for padding.
These support splicing, clipping, multi-part and padded alignments.
Figure 1 shows examples of CIGAR strings for different types of alignments.
2.1.3 Binary Alignment/Map format To improve the performance, we designed a companion format Binary Alignment/Map (BAM), which is the binary representation of SAM and keeps exactly the same information as SAM.
BAM is compressed by the BGZF library, a generic library developed by us to achieve fast random access in a zlib-compatible compressed ﬁle.
An example alignment of 112 Gbp of Illumina GA data requires 116 GB of disk space (1.0 byte per input base), including sequences, base qualities and all the meta information generated by MAQ.
Most of this space is used to store the base qualities.
2.1.4 Sorting and indexing A SAM/BAM ﬁle can be unsorted, but sorting by coordinate is used to streamline data processing and to avoid loading extra alignments into memory.
A position-sorted BAM ﬁle can be indexed.
We combine the UCSC binning scheme (Kent et al., 2002) and simple linear indexing to achieve fast random retrieval of alignments overlapping a    2009 The Author(s) This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/2.0/uk/) which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.
[14:24 14/7/2009 Bioinformatics-btp352.tex]  Page: 2078  2078 2079   SAM and SAMtools  Table 1.
Mandatory ﬁelds in the SAM format  No.
Name  Description  1 2 3 4 5 6 7 8 9 10 11  QNAME FLAG RNAME POS MAPQ CIGAR MRNM MPOS ISIZE SEQ QUAL  Query NAME of the read or the read pair Bitwise FLAG (pairing, strand, mate strand, etc.)
Reference sequence NAME 1-Based leftmost POSition of clipped alignment MAPping Quality (Phred-scaled) Extended CIGAR string (operations: MIDNSHP) Mate Reference NaMe ( =  if same as RNAME) 1-Based leftmost Mate POSition Inferred Insert SIZE Query SEQuence on the same strand as the reference Query QUALity (ASCII-33=Phred base quality)  SAMtools has two separate implementations, one in C and the other in  Java, with slightly different functionality.
3 CONCLUSIONS We designed and implemented a generic alignment format, SAM, which is simple to work with and ﬂexible enough to keep most information from various sequencing platforms and read aligners.
The equivalent binary representation, BAM, is compact in size and supports fast retrieval of alignments in speciﬁed regions.
Using positional sorting and indexing, applications can perform stream- based processing on speciﬁc genomic regions without loading the entire ﬁle into memory.
The SAM/BAM format, together with SAMtools, separates the alignment step from downstream analyses, enabling a generic and modular approach to the analysis of genomic sequencing data.
ACKNOWLEDGEMENTS We are grateful to James Bonﬁeld for the comments on indexing and to SAMtools users for testing the software as it has matured.
Funding: Wellcome Trust/077192/Z/05/Z  NIH Hapmap/1000 Genomes Project grant (U54HG002750 to B.H.).
Conﬂict of Interest: none declared.
REFERENCES Kent,W.J.
et al.
(2002) The human genome browser at UCSC.
Genome Res., 12,  996 1006.
Langmead,B.
et al (2009) Ultrafast and memory-efﬁcient alignment of short DNA  sequences to the human genome.
Genome Biol., 10, R25.
Li,H.
et al (2008) Mapping short DNA sequencing reads and calling variants using  mapping quality scores.
Genome Res., 18, 1851 1858.
Mardis,E.R.
(2008) Next-generation DNA sequencing methods.
Annu.
Rev.
Genomics  Hum.
Genet., 9, 387 402.
2079  Fig.
1.
Example of extended CIGAR and the pileup output.
(a) Alignments of one pair of reads and three single-end reads.
(b) The corresponding SAM ﬁle.
The  @SQ  line in the header section gives the order of reference sequences.
Notably, r001 is the name of a read pair.
According to FLAG 163 (=1 + 2 + 32 + 128), the read mapped to position 7 is the second read in the pair (128) and regarded as properly paired (1 + 2)  its mate is mapped to 37 on the reverse strand (32).
Read r002 has three soft-clipped (unaligned) bases.
The coordinate shown in SAM is the position of the ﬁrst aligned base.
The CIGAR string for this alignment contains a P (padding) operation which correctly aligns the inserted sequences.
Padding operations can be absent when an aligner does not support multiple sequence alignment.
The last six bases of read r003 map to position 9, and the ﬁrst ﬁve to position 29 on the reverse strand.
The hard clipping operation H indicates that the clipped sequence is not present in the sequence ﬁeld.
The NM tag gives the number of mismatches.
Read r004 is aligned across an intron, indicated by the N operation.
(c) Simpliﬁed pileup output by SAMtools.
Each line consists of reference name, sorted coordinate, reference base, the number of reads covering the position and read bases.
In the ﬁfth ﬁeld, a dot or a comma denotes a base identical to the reference  a dot or a capital letter denotes a base from a read mapped on the forward strand, while a comma or a lowercase letter on the reverse strand.
speciﬁed chromosomal region.
In most cases, only one seek call is needed to retrieve alignments in a region.
2.2 SAMtools software package SAMtools is a library and software package for parsing and manipulating alignments in the SAM/BAM format.
It is able to convert from other alignment formats, sort and merge alignments, remove PCR duplicates, generate per-position information in the pileup format (Fig.
1c), call SNPs and short indel variants, and show alignments in a text-based viewer.
For the example alignment of 112 Gbp Illumina GA data, SAMtools took about 10 h to convert from the MAQ format and 40 min to index with  30 MB memory.
Conversion is slower mainly because compression with zlib is slower than decompression.
External sorting writes temporary BAM ﬁles and would typically be twice as slow as conversion.
[14:24 14/7/2009 Bioinformatics-btp352.tex]  Page: 2079  2078 2079
