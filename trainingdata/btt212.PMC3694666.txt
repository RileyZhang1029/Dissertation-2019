BIOINFORMATICS  Vol.
29 ISMB/ECCB 2013, pages i344 i351 doi:10.1093/bioinformatics/btt212  Using state machines to model the Ion Torrent sequencing process and to improve read error rates David Golan1,* and Paul Medvedev2,3 1Department of Statistics and Operations Research, School of Mathematical Sciences, Tel-Aviv University, Tel-Aviv 69978, Israel, 2Department of Computer Science and Engineering and 3Department of Biochemistry and Molecular Biology, The Pennsylvania State University, PA 16802, USA  ABSTRACT Motivation: The importance of fast and affordable DNA sequencing methods for current day life sciences, medicine and biotechnology is hard to overstate.
A major player is Ion Torrent, a pyrosequencing-like technology which produces flowgrams   sequences of incorporation values   which are converted into nucleotide sequences by a base- calling algorithm.
Because of its exploitation of ubiquitous semicon- ductor technology and innovation in chemistry, Ion Torrent has been gaining popularity since its debut in 2011.
Despite the advantages, however, Ion Torrent read accuracy remains a significant concern.
Results: We present FlowgramFixer, a new algorithm for converting flowgrams into reads.
Our key observation is that the incorporation signals of neighboring flows, even after normalization and phase cor- rection, carry considerable mutual information and are important in making the correct base-call.
We therefore propose that base-calling of flowgrams should be done on a read-wide level, rather than one flow at a time.
We show that this can be done in linear-time by com- bining a state machine with a Viterbi algorithm to find the nucleotide sequence that maximizes the likelihood of the observed flowgram.
FlowgramFixer is applicable to any flowgram-based sequencing plat- form.
We demonstrate FlowgramFixer s superior performance on Ion Torrent Escherichia coli data, with a 4.8% improvement in the number of high-quality mapped reads and a 7.1% improvement in the number of uniquely mappable reads.
Availability: Binaries and source code of FlowgramFixer are freely available at: http://www.cs.tau.ac.il/ davidgo5/flowgramfixer.html.
Contact: davidgo5@post.tau.ac.il  1 INTRODUCTION  The importance of fast and affordable DNA sequencing methods for current day life sciences, medicine and biotechnology is hard to overstate.
Ion Torrent s semiconductor sequencing technol- ogy, as implemented in its Personal Genome Machine (PGM), has been gaining popularity as a fast and affordable sequenc- ing platform since it s debut in 2011 (Merriman et al., 2012  Rothberg et al., 2011).
Semiconductor sequencing has several advantages compared with other high-throughput sequencing platforms, including lack of optics, use of natural, unmodified dNTP molecules and exploitation of ubiquitous semiconductor technology.
These advances make Ion Torrent a serious player in the sequencer market, providing reads several hundred bases long and reducing sequencing costs (Eisenstein, 2012).
Ion Torrent is a pyrosequencing-like platform, similar to 454.
In every sequencing step, or flow, the chip is washed over with a  *To whom correspondence should be addressed.
specific nucleotide.
The nucleotide in the flow is incorporated by all consecutive complementary nucleotides  hanging  at the end of each template this is called incorporation.
Each incorpor- ation releases an ion, so that the change in pH level indicates whether incorporation occurred and, if so, the number of con- secutive bases incorporated.
The nucleotide that is washed during each flow is pre-determined and is composed from several repetitions of a shorter sequence of nucleotides known as the  wash cycle .
The default wash cycle for 454 is 4 nt long: TACG, whereas Ion Torrent s PGM uses a more complicated wash cycle that is 32 nt long.
The resulting read is then specified in terms of a flowgram a sequence of incorporation values, one for each flow.
Figure 1 gives an overview of the process.
Despite its advantages, Ion Torrent read accuracy remains a significant concern.
Errors are produced during base-calling, a process by which the noisy signal from the sequencer is con- verted into a sequence of nucleotides.
Base-calling errors can especially pose challenges for re-sequencing projects, where they can be confused with SNPs.
In fact, a recent comparative study found that Ion Torrent s PGM still suffers from high  false-positive rates in SNP calling, relative to Illumina data (Quail et al., 2012).
There is a large body of work on base-calling algorithms [see Ledergerber and Dessimoz (2011) for a survey], and there have been several techniques developed specifically for pyrosequencing data (Beuf et al., 2012  Lysholm et al., 2011  Quince et al., 2011  Quinlan et al., 2008  Vacic et al., 2008).
These techniques have mostly focused on correcting 454 s well-documented (Balzer et al., 2010) errors in long homo- polymer runs or alignment of their flowgrams.
However, there has been little work done in correcting base-calling errors in Ion Torrent data.
Ion Torrent s base-calling algorithm, after performing phase- correction and normalizing to handle signal decay, simply trans- lates the rounded values of each flow into the corresponding number of consecutive nucleotides.
In essence, it is a memoryless algorithm that makes a call for each flow independent of infor- mation from previous or following flows.
Our key observation is that the signals of neighboring flows carry considerable mutual information and are important in making the correct base-call.
We propose that base-calling of flowgrams should be done on a read-wide level, rather than one flow at a time.
To this end, we design a linear-time method that combines a state machine with a Viterbi algorithm to find the nucleotide sequence that maximizes the likelihood of the observed flowgram.
Our algorithm is applicable to any flowgram-based sequencing platform and is implemented in a publicly available tool called FlowgramFixer.
We demonstrate FlowgramFixer s superior performance on Ion Torrent Escherichia coli data, with a 4.8% improvement in the  ÃŸ The Author 2013.
Published by Oxford University Press.
This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/3.0/), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited.
For commercial re-use, please contact journals.permissions@oup.com   Improved base-calling for Ion-Torrent via state-machines  Second, the signal decays over time, as at each flow a small fraction of the template clones attached to each bead are termi- nated and no longer incorporate additional nucleotides (this phe- nomenon is known as  drooping ).
Thus, the actual signal observed at each flow decays over time.
Although this phenom- enon is not by itself a source of noise, the decay of the signal decreases the signal-to-noise ratio, making correct calling harder as the sequencing process progresses.
Finally, some of the template clones drop out of phase as the sequencing progresses.
Even when the current nucleotide in the flow should be incorporated by all template clones, clones might not, by chance, incorporate it (for example, if no dNTP molecule is found in the physical vicinity of the template).
These clones would incorporate the nucleotide at the next flow of the same nucleotide.
Hence, the signal becomes unphased the observed signal is a superposition of lagged copies of the true signal, where the lags depend on the wash cycle and the underlying sequence itself.
As the initial step of its base-calling software, Ion Torrent per- forms phase-correction and signal decay normalization algo- rithms.
A typical flowgram, after this correction, is shown in Figure 2.
The resulting incorporation values are still noisy, and, to convert them to nucleotide space, Ion Torrent rounds them to the nearest integer.
Although this last step is effective and scalable, we find that it is suboptimal for several reasons.
First, rounding the signal flow-by-flow might result in an  impossible  sequence of signals.
Consider the following toy example, where the first nucleotide is T and the wash cycle is ACGT.
The expected signal is (0,0,0,1) no incorporation in the first three flows, and an incorporation of a single nucleotide in the fourth flow.
Next, imagine that because of noise, the mea- sured signal is (0.1,0.05,0.08,0.4).
Rounding the signal would result in (0,0,0,0).
Such a flow-sequence implies that the first nucleotide cannot be A, C, G or T an impossibility.
However, by observing the whole sequence of incorporation values together, we would have been able to deduce that the fourth incorporation of 0.4 should be rounded up, not down.
Second, the probability of observing an incorporation event depends on the incorporation signals of previous and next flows.
Assume, for example, the same flow order as before, and assume that we have seen incorporations in the first three flows.
This implies that the sequence starts with ACG, and that the next base in the sequence is not G (otherwise we would have seen two incorporation events in the third flow).
Therefore, there are three possible candidates for the next nucleotide A, C and T. Next, assume a different scenario an incorporation event happened only in the second flow, with no incorporation in the first and third flows.
In this case, the sequence starts with C, and the second nucleotide cannot be G (otherwise we would have seen an incorp- oration in the third flow), and it cannot be C (otherwise we would have seen two incorporations in the second flow).
Hence, there are only two candidates for the next nucleotide A and T. In the first scenario, the previous probability of observing an incorporation in the fourth flow is 1 3, as T is one of three possible nucleotides, whereas in the second scenario, the previous probability is 1 2, as T is one of only two possible nucleotides.
Simply rounding the signal at each flow to the nearest integer ignores the previous probability obtained by considering the incorporations at previ- ous flows.
Future flows also carry useful information regarding a current flow in a similar manner.
i345  Fig.
1.
Ion sequencing work flow.
The overall workflow is shown in (a).
A genome library is prepared by fragmenting and size-selecting DNA, followed by the ligation of forward and reverse adapters (b).
Each adap- ter-ligated template is clonally amplified onto a bead, so that each bead contains many copies of the same DNA template (c).
Sequence on the chip, sequencing primers and DNA polymerase are then bound to the beads, which are pipetted into wells on the chip (d).
The chip is then repeatedly flooded by nucleotides, which, when binding to the comple- mentary nucleotide on a template, release an ion.
At each flow, the elec- trical signal at each well indicating the number of incorporations [Figure adapted from Rothberg et al.
(2011)]  is measured,  number of high-quality mapped reads and a 7.1% improvement in the number of uniquely mappable reads.
2 BACKGROUND AND MOTIVATING EXAMPLES  We denote the set of possible DNA sequences by  nt-space , i.e.
the space of possible combinations of the four nucleotides A, C, G and T. The Ion Torrent platform does not provide us directly with the read in nucleotide space, but instead, we observe the incorporation signal at each flow.
It is, therefore, useful to define  flow-space , as the vector of incorporation signals (flowgram) obtained per flow by a perfect (noiseless) sequencing process.
For example, if the flow nucleotides are two repetitions of the wash cycle  ACGT , and the sequence itself is GCCT, then the flow- space representation is (0,0,1,0,0,2,0,1).
The actual signal is noisy  therefore, the observed flowgram is not a sequence of integers, but rather a sequence of non-negative real values.
The noise is due to a range of artifacts.
First, Ion Torrent s platform uses discrete time measurements from the pH sensors at the bottom of each well to fit a theoretical physical model of a continuous time process (nucleotide incorporation).
The process of nucleotide incorporation is random by nature and is affected by various factors ranging from random changes of dNTP molecule concentration to random fluctuations in fluid- dynamics because of bubbles or turbulences.
And so, the theor- etical physical model does not capture the full complexity of the sequencing process and does not always fit the observed signals perfectly, resulting in noisy signal.
D.Golan and P.Medvedev  Fig.
2.
Typical flowgram.
We show the normalized and phase-corrected signal of a single flowgram.
The actual nucleotide in each flow is indicated by the appropriate letter.
Ideal signals are expected to be integers, indicating exactly how many nucleotides were incorporated during each flow.
However, the actual signal at each flow is noisy, and the noise increases as the sequencing process advances  Finally, rounding signals ignores other previous information regarding the genome, such as GC-content and the lower frequen- cies of longer homopolymers.
One can think of the rounding method as setting a threshold of 0.5 and calling an incorporation event when the incorporation signal is higher than the threshold.
When sequencing genomes that are known to be GC-rich, it is reasonable to use different thresholds for flows with different washed nucleotides.
For example, when the flow is either G or C, an incorporation event is more likely before observing the signal, compared with flows of A or T. Similarly, longer homo- polymers are less likely  therefore, the threshold for calling 0mer versus 1mer need not be the same threshold as the one used in calling 5mer versus 6mer [similar to what is done for 454 reads by Quinlan et al.
(2008) and others].
3 METHODS  Motivated by the examples of the previous section, we develop a method that finds a nucleotide sequence that maximizes the likelihood of the observed flowgram.
We start by describing the underlying state machine that captures the sequencing process.
We then define the distributions necessary for calculating the likelihood.
Finally, we describe two dynamic programming algorithms a Viterbi algorithm to find the maximum like- lihood nucleotide sequence, and a forward algorithm to obtain max- imum-likelihood estimates of the noise-model parameters.
3.1 State machine model To connect flow-space and nucleotide-space, one can ask, at each flow, what are the different possibilities for the next nucleotide.
For instance, at the first flow, we have no information at all, and the first base of the sequence could be A, C, G or T. If the first flow presents no incorpor- ation, the possible candidates become C, G and T and so forth.
This process is illustrated on our previous toy example in Table 1.
More generally, we define a deterministic state machine (Hopcroft and Ullman, 1979).
There are 15 states, corresponding to the 24   1 Â¼ 15 possible sets of candidate nucleotides.
Each state represents the possible nucleotides for the next position, in nucleotide-space.
It is convenient to think of the binary representation of the number as indicating which nucleotides are candidates, or, alternatively, as an actual set containing  i346  Table 1.
Representing the set of possible nucleotides after each flow  Flow No.
Flow nucleotide  Candidates  Remaining sequence  Signal  1 2 3 4 5 6 7 8  A C G T A C G T  ACGT CGT GT ACT AC C AGT AT  GCCT GCCT GCCT CCT CCT T T    0 0 1 0 0 2 0 1  Note: Here, the wash cycle is ACGT and the sequenced string is GCCT.
Initially, any nucleotide is possible the candidates are ACGT.
The first flow (A) produces no incorporation signal  therefore, the candidates for the next nucleotide are CGT.
After an incorporation event, as in flows 3 and 6, the candidate nucleotides for the next base in the sequence are all the nucleotides except for the one that was just incorporated.
the appropriate subset of base letters.
The initial state is fA, C, G, Tg.
Given a flow nucleotide, a state s can transition to at most two states, one where an incorporation occurs, denoted sÃ¾, and one where no incorporation occurs, denoted s .
For example, when the state is s Â¼ fA, C, Tg, and the flow nucleotide is A, the next state can be either sÃ¾ Â¼ fC, G, Tg (if there is an incorporation event, A is now the only non- candidate) or s  Â¼ fC, Tg (if there is no incorporation event, A is no longer a candidate).
When the flow nucleotide is not one of the candidates given by the current state, there is no incorporation transition.
Thus, each state has at most eight outgoing transitions.
A path in the state machine is a sequence of transitions from the initial state.
Given a wash cycle, a flow-sequence defines a path in the state machine in the obvious manner.
Figure 3 illustrates the transitions of a state machine on a simple wash cycle.
3.2 Problem formulation Let O Â¼ o1, .
.
.
on denote the observed (normalized and phase-corrected) incorporation values, with F Â¼ f1, .
.
.
, fn being the true (noiseless) values state machine, in  flow-space.
defines  path  the  in  F  a   Flow nucleotide  start  ACGT  A  C  G  T  A  C  G  T  AC  C  GT  T  +/-  CGT  GT  AGT  ACT  ACG  AT  A  CGT  CG  AGT  ACT  G  AT  Improved base-calling for Ion-Torrent via state-machines  incorporation values that are impossible, given the state transition get a i Â¼ siÃ¾1, then fi must be 0, otherwise the likelihood of 0.
For example, if s  likelihood is 0.
8  :  For ease of notation, we define the distribution of fi, conditional on the  state transition:   0Ã°fijsi, siÃ¾1Ãž Â¼  Iffi Â¼ 0g  Ã° fiÃž 0  siÃ¾1 Â¼ s  siÃ¾1 Â¼ sÃ¾ i otherwise  i   0 replaces both the indicator functions and the previous  .
It is also defined for all state pairs, yielding 0 when the state pair is not a pair of legitimate consecutive states.
Using this notation, we can rewrite the like- lihood equation:  LÃ°FjOÃž Â¼  PÃ°si 1 !
siÃž 0Ã°fijsi 1, siÃž 4  , iÃ°oijfiÃž:  Y  n  iÂ¼1  We now proceed to define the three distributions necessary to evaluate  this equation.
3.2.1 Transition probabilities The probability of transitioning from one state to the next depends on the size of the state (number of candidate nucleotides) and the probability of observing a given nucleotide in the genome.
These depend on the nucleotide used in the i th flow, which we denote as wi.
Given pGC, the probability of observing a G or C nucleotide in the genome in question (i.e.
the GC-content of the genome), we denote pC Â¼ pG Â¼ 1 2 pGC the probabilities of individual nucleotide types.
When the GC-content of the genome is not known, we use pGC Â¼ 0:5.
2   1  The transition probabilities are then given by:  2 pGC and pA Â¼ pT Â¼ 1 8  :  PÃ°s !
sÃ¾Ãž Â¼  P  pwi  x2s 0  px  wi 2 s wi =2 s  :  PÃ°s !
s Ãž Â¼ 1   PÃ°SiÃ¾1 Â¼ sÃ¾jSi Â¼ sÃž    For the simple case of pGC Â¼ 0:5, we get:  PÃ°SiÃ¾1 Â¼ sÃ¾jSi Â¼ sÃž Â¼ 1jsj wi 2 s 0 wi =2 s  :  Fig.
3.
Illustration of state machine transitions.
In this example, the flow is composed of repetitions of the wash cycle ACGT and the state machine starts from the state  A,C,G,T .
Each layer of the figure illustrates the possible states at that flow index.
Incorporation and no incorporation transitions are marked by solid and dashed edges, respectively.
Note that nodes with a single nucleotide dictate incorporation in the next flow and have no outgoing dashed edges  Note that invalid transitions have zero probability, e.g.
an incorporation of a T in state fA, C, Gg is impossible and has zero probability because wi Â¼ T =2fA, C, Gg.
In this case s  Â¼ s, as no incorporation leaves the state machine at the same state.
Similarly, the incorporation of a T in state fTg is much more likely than in state fA, C, G, Tg.
Thus, these probabilities capture most of the intuition presented in the motivating examples of Section 2.
S Â¼ s0, s1, .
.
.
, sn, snÃ¾1, where si is the state after the application of flow fi.
We i.e.
s0 Â¼ fA, C, G, Tg.
The likelihood of the flows F given the observed values O is given by:  state before any incorporations,  s0 be  initial  the  let  LÃ°FjOÃž Â¼  Y  n  iÂ¼1        IfsÃ¾  i 1 Â¼ sigIf fi40g Ã° fiÃž Ã¾ Ifs   PÃ°si 1 !
siÃž  , iÃ°oijfiÃž    i 1 Â¼ sigIffi Â¼ 0g  ,  where PÃ°si 1 !
siÃž is the probability of transition from state si 1 to state si,   is a previous distribution over the lengths of homopolymers in the genome and   , i is the probability density at flow i of oi given that the number of incorporations is fi, governed by a set of parameters  .
The indicator functions I, in the second line of the equation, are used to determine whether the state transition dictates an incorporation event, and whether the incorporation value fi matches the incorporation value dictated by the state transition.
Thus, impossible state transitions, or  wi  Ã°1   pwiÃž, where pwi  3.2.2 Homopolymer length distribution ( ) The likelihood frame- work allows for an easy integration of  , the previous information regarding the distribution of homopolymers  lengths in the genome.
One appropriate prior that we use is the geometric distribution: PÃ°fi Â¼ mÃž Â¼ pm 1 is the proportion of the current flow nucleotide wi in the genome.
If no previous information exists on the GC-content of the genome, as is the case for the standard 454 base-calling algorithm (Ledergerber and Dessimoz, 2011), then pwi can be set to 1 4.
Another possibility is to use the non-informative flat prior.
Although the flat prior is an improper prior, for all practical purposes it can be used in this scenario.
The immediate interpretation of this prior is that we have no information at all regarding the distribution of homopolymer sizes.
Alternatively, other priors can be specified, for example, an empirical Bayes prior as in Quinlan et al.
(2008).
3.2.3 Noise model (  , i) Finally, we specify the noise model.
We denote the standard deviation of the noise model at flow i by  i, and  i347   D.Golan and P.Medvedev  we denote   the set of parameters that governs the behavior of  i.
Let   , i be the probability density function at flow i given the parameters  .
Hence,   , iÃ°oi 4j 4fiÃž is the probability density of oi given that the number of incorporations is fi, that the flow cycle is i and that the parameter set is  .
We assume a double exponential distribution around the true number of incorporated nucleotides, i.e.
the probability density of observing the incorporation value oi when the true number of incorporations is fi and the flow cycle is i is given by: 1ï¬ƒï¬ƒï¬ƒ p  i 2  jfi oij  i  p   2  ï¬ƒï¬ƒ  e  :  Note the non-standard parameterization using the standard deviation instead of the usual rate parameter.
We use this parameterization to allow easy interpretation of the parameters in terms of standard devi- ations.
To allow  i to increase with the progression of the sequencing process, we assume a linear dependency of  i on the flow cycle index i:   i Â¼  0 Ã¾  1i,  where  0 is the intercept term, giving the standard deviation at the first flow cycle, and  1 is the trend term, giving the increment in the standard deviation of the noise from one flow cycle to the next.
Thus,   Â¼ Ã° 0,  1Ãž.
Although richer noise models are conceivable, a simple noise model is required to maintain a reasonable running time.
3.3 Dynamic programming algorithms Having fully defined the likelihood function (given a set of noise model parameters  ), we now seek to find the series of true incorporation values (F) that would maximize the likelihood of the observed incorporation values (O).
To this end, we apply the standard Viterbi dynamic program- ming algorithm (Durbin et al., 1998).
The Viterbi algorithm works by con- structing a table where each element Vi, j is the maximum log-likelihood of observing flows o1, .
.
.
, oi, given that the last state of the state machine is si Â¼ j.
The maximum log-likelihood of O is then given by the arg maxs2S Vs, n, where S is the set of 15 possible states.
To construct the table, we apply the standard Viterbi recurrence rela-  tion to the log our likelihood function:  ViÃ¾1, j Â¼ max s2S, f2ZÃ¾  Vi, s Ã¾ log PÃ°s !
jÃž Ã¾ log  0Ã° fjs, jÃž Ã¾ log   , iÃ°oi j f Ãž,  Intuitively, we wish to compute the log-likelihood of the max-likelihood path of length iÃ¾ 1 ending at state j, given the log-likelihoods of the max- likelihood paths ending at the previous flow i (given by Vi, 1, .
.
.
, Vi, 15).
We iterate over all possible previous states and all possible incorporation values and for each such pair Ã°s, fÃž update the log-likelihood to account for the additional state transition, the additional flow value and the add- itional observed value.
We then set ViÃ¾1, j to be maximal value over all such pairs.
However, whenever s0 =2 sÃ¾, s  the probability PÃ°s !
s0Ãž is 0.
This is the case for most state pairs and can be used to greatly accelerate the algo- rithm.
Specifically, it is enough for the recurrence to only consider values of s such that j 2 fsÃ¾, s g. Moreover, not all values of f are possible for i , then f 6Â¼ 0, and if j Â¼ s  i , then fÂ¼ 0.
Given all state transitions.
If j Â¼ sÃ¾ these simplifications, we can rewrite the recurrence as  iÃ¾1, j Â¼ max VÃ¾  s s:t: sÃ¾Â¼j, f40  Vi, s Ã¾ log PÃ°s !
jÃž  iÃ¾1, j Â¼ max V  s s:t: s Â¼j  Vi, s Ã¾ log PÃ°s !
jÃž  ViÃ¾1, j Â¼ maxfVÃ¾  iÃ¾1, j, V   Ã¾ log   , iÃ°oij0Ãž, iÃ¾1, jg  Ã¾ log  Ã°fÃž Ã¾ log   , iÃ°oij fÃž,  i348  That is, we optimize separately for the case of incorporation (VÃ¾ and for the case of no incorporation (V  of the two.
iÃ¾1, j) iÃ¾1, j), taking the maximal value  In theory, one still needs to iterate over all possible value of f when computing VÃ¾ iÃ¾1, j.
However, one can assume that all homopolymers are shorter than a certain length M. The Ion Torrent software sets MÂ¼ 13.
As the running time of the algorithm is linear in M, we chose an adaptive approach  we set a different value for each flow, given by Mi Â¼ maxf oid e Ã¾ 2, 4g.
This reduces the value of Mi for most flows, thus greatly reducing the overall running time.
To obtain the maximum likelihood path, one only has to keep track of the values of s and f that are used to maximize each recurrence.
We can then start with the optimal last state (arg maxs2S Vs, n) and work our way backward using the standard dynamic programming backtracking procedure.
The running time of the algorithm is linear in n. The dynamic pro- gramming table contains n rows and jSj Â¼ 15 columns.
To compute the value of each cell, we must consider two values for s and Mi values for f. The backtracking algorithm is also linear in the size of the table.
Therefore, the time complexity of the algorithm is O(nM), where M Â¼ max Mi.
The space complexity is O(n), which is the size of the table.
3.3.1 Estimating the noise-model parameters The likelihood of a set of noise model parameters   can be calculated efficiently using the forward algorithm (Durbin et al., 1998)  thus, the maximum likelihood estimators of the parameters can be used in the Viterbi.
The forward algorithm is similar in spirit to the Viterbi algorithm.
Given a value of the parameter set  , we define Li, jÃ° Ãž as the likelihood of observing flows o1, .
.
.
, oi, given that the last state of the state machine is si Â¼ j.
The the specific set of parameters   is then given by likelihood of LÃ° Ãž Â¼  P s2S Ls, nÃ° Ãž.
A table is constructed in a similar manner to the Viterbi algorithm, with the major differences being using likelihoods instead of log likeli- hoods and summing over all previous states rather than using only the maximal previous state:  X  LiÃ¾1, jÃ° Ãž Â¼  Li, sÃ° ÃžPÃ°s !
jÃž    s2S, f2ZÃ¾   0Ã° fj s, jÃž  , iÃ°oij fÃž:  As in the case of the Viterbi algorithm, the specific state machine set-up enables faster computations by taking into account only possible state transitions and possible incorporation values.
As the likelihood of a set of parameters   can be computed by the aforementioned forward algorithm, a reasonable approach would be finding the maximum likelihood estimator of   and plugging it into the Viterbi algorithm.
Although this approach is appealing, for every value of  , the likelihood needs to be re-evaluated, resulting in a considerable increase in running time.
We, therefore, suggest applying this procedure to a subset of flowgrams and use the mean value of   as the parameter for the rest of the flowgrams.
The maximization itself can be carried out using an exhaustive grid search.
However, we found that using the greedy algorithm obtained similar results to the grid search (results not shown) while requiring only a fraction of the likelihood evaluations.
Both methods are implemented in FlowgramFixer.
3.3.2 Relationship to a hidden Markov model Finally, we wish to note the resemblance of our method to a hidden Markov model (HMM) technique (Baum and Petrie, 1966).
In fact, our model can be expressed as an HMM by representing every consecutive pair of states as a single- hidden state and constructing transition and emission probabilities accordingly.
However, we find the presentation via state machine to be more intuitive and straightforward.
4 RESULTS  We demonstrate our method using a publicly available dataset from Ion Torrent s webpage, namely, C11-278.
C11-278 is a re- sequencing experiment of E.coli DH10B, using the PGM with an Ion 318 chip.
We extracted the normalized and phase-corrected incorpor- ation signals from the SFF files.
The file contained 6 742 759 flowgrams and 1.65 Gb, respectively.
The PGM was run using a wash cycle of 32 bases:  TACGTACGTCTGAGCATCGATCGATGTACAGC,  and used 520 flows.
We note this is the default Ion Torrent wash cycle.
We first ran the default calling algorithm, which is equivalent to rounding the signals in the SFF file.
We use this algorithm as a baseline for our comparisons.
We then ran FlowgramFixer, which took  4 h on a single CPU (Xeon E7-8837 @ 2.67 GHz) with inconsequential memory use (510 Mb).
This run included a preliminary step of estimating the optimal noise-model parameters for a subset of 20 384 flowgrams, using a greedy algorithm, computing the mean intercept and trend and running the Viterbi on the entire dataset using the mean param- eters.
To ensure reproducibility, the subset of flowgrams we used originated from a 200-by-200 wells region from the chip, which were pre-specified by Ion Torrent and available on their website as an exploratory dataset.
The mean intercept and trend were 0.0377 and 1:766   10 4, respectively.
The output of each algorithm is a list of integer-valued flowgrams, which we converted to reads and aligned to the ref- erence with bowtie2 (Langmead and Salzberg, 2012) using de- fault parameters.
First, we compared the number of uniquely aligned reads.
The baseline rounding method yielded 3 537 723 uniquely mapped reads, whereas FlowgramFixer yielded 3 788 697 an increase of 250 974 reads (7.1%).
Second, we counted how many reads (hard clipped at 200 bp) were mapped uniquely with high- mapping quality (Table 2).
FlowgramFixer outperformed the baseline rounding method for all quality thresholds, with a 2.8 4.8% increase in the number of high-quality aligned reads.
We wanted to study the effect of the position along the wash cycle on error rates.
For each flowgram corrected by the baseline method, we converted the aligned-to part of the reference genome to a flowgram and noted the flow positions that had a mismatch.
We then averaged the error rates of flows that  Table 2.
Number of reads (hard clipped at 200 bp) mapping with quality above the given thresholds  MAPQ   20  MAPQ   30  MAPQ   40  Baseline FlowgramFixer Difference Improvement (%)  5 463 391 5 617 599 154 208 2.8  4 867 523 5 098 930 231 407 4.8  4 857 829 5 088 117 230 288 4.7  Note: We used 20, 30 and 40 as MAPQ thresholds, corresponding to mis-alignment probabilities of 0.01, 0.001 and 0.0001, respectively.
FlowgramFixer is able to accurately map up to 4.8% more reads than the baseline.
Improved base-calling for Ion-Torrent via state-machines  are identical mod 32 (the length of the wash cycle) (Fig.
4).
It is evident that different positions along the wash cycle display remarkably different error rates.
This can partially be explained by patterns in the wash cycle.
For example, positions 9 11 contain the nucleotides T, C and T. Because of the first T, the probability of observing incorporation at the second T is much lower  therefore, more flows have no incorporations.
As no incorporations are easier to call, the error rate at the second T is much lower as well.
A similar situation occurs at positions 25 27, containing T, G and T. Positions 11 and 27 are high- lighted in red in Figure 4.
The opposite effect can also be observed, such as the A at position 13.
As there is a large gap between the appearance of the previous A (position 6), there is a higher probability of in- corporation and, hence, of error.
A similar situation occurs with the C at position 29.
These positions are highlighted in green in Figure 4.
Next, we investigated the dependence of the error rate on the flow position.
The average error-rates per flow of the rounding algorithm are portrayed in Figure 5.
It is clear that the vast majority of errors occur at the ends of the flowgrams, and that such a high-error rate renders the ends of Ion Torrent reads useless.
As this is the case for most, if not all, high-throughput sequencing technologies, most real-life applications involve a step of  clipping  removing the 30-end of each read either by setting a pre-defined length (hard clipping) or using a reference genome to determine the optimal cut-off point (soft clipping).
We, therefore, applied soft clipping to the 30-end of each read using bowtie2 (using the local parameter) and re-estimated the  )  %  (    e  t  a r   r o r r e     e g a r e v A  4  .
1  2  .
1  0  .
1  8  .
0  6  .
0  4 0  .
2  .
0  A  C  A  A  G  C  G  T  T  T  T  T  G  T  G  A C  A  C  G  C  C  G  A  C  G  A  G  C  A  T  T  0  5  10  15  20  25  30  Position within wash cycle  Fig.
4.
Dependence of error rate on wash cycle.
Average error rates along the 32-nt long wash cycle, for the rounding method.
The actual nucleotide in each flow is indicated by the corresponding letter.
We used the first 320 flows to calculate the rates and discarded the first cycle to cancel the effect of the sequencing adapter.
Note the high dependence of the error rate on the position in the wash cycle positions 13 and 27 (colored red) display a considerably low error rate, whereas positions 11 and 29 (colored green) display a considerably high error rate.
These changes in error rate can be partially explained by patterns in the wash cycle  i349   D.Golan and P.Medvedev  )  %  (    e  t  a r   r o r r  E  0 7  0 6  0 5  0 4  0 3  0 2  0 1  0  G  A G C  C  C  C A A GC G A C GA G C G C T G C G G A G T G T C G A C T A T T A A A A G C A A G T C T T T T C GA T C G G A T A GA C C TG C C G TC A G C C T A A C G A G A T G T C G C T A C CGA TG C A GA T T A A T A GCA C GTACGTCT C G TA C T A GC CGATG GAT TACGTACGTCTG A T T C C GCA A A CGATCGATGTA T GCATCGATCGATGTACAGCTACGTACGTCTG TACGTACGTCTG CGATCGATGTA TA TACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTG AGC GCA AGC C GCA  C G A  A  T  T  T  T  T  T  )  %  (    e c n e r e  f f i  d     t  e a r   r o r r  E  4  3  2  1  0  1    A  A  C  A  C  A  C  A  A  T  T  T  T  T  T C  C C T C C C T A A A A A T T C G AC G AC T G G A C A GA GA A T AT G T G A G C A A A C C A GTA AC G T C A G ATC T T T TA AC AT T T C T C T GT A GT T T A A A T T TACGTACGTCTG GT TAC G ATCG T C T T AT GT T G G G G G G AT T G G TACGTCTG A A ATGTACAGC C GCAT G C C GTCTGAGCATCGATCGATGTACAGCTACGTACGTCTGAGCATCGATCGATGTACAGCTACGTACGTCTG T GCATCGATCGATGTACAGCTACGTACGTCTG ACG A T CGATCG AGC AGC T AG AGC GTA GCA G AGC G A A GTA C C G C CG A CG GTA G CG A CTG A C C G C C A C CTG GTA CTG CTG C G G A A C C A A GT TA C C C G TA A G A CTG C C C G GT TG A CT G G G C G G  C T  C T  G  C  C  0  100  200  300  400  500  0  100  200  Flow #  300  400  Flow #  Fig.
5.
Per-flow error rates of the default calling algorithm used as a baseline for comparison.
The error rate clearly increases with the flow number, with a dramatic increase beginning around flow 380  A  A  A  C  T  T  C  T  T  T  C  A  C  T  A  A  T  A C A A C T T A AC G C T G T T A G C A T AT T C G T A G GTA T C A G G T T AT A G C T GTACG ATC T G A A G C G A GTACGT A G ATC A T G C G T G C G C G C C A A A C G T T A C A C GTACG G G G GAT C A C C C G G G T A A G G C ATCGATGTA C C T C T A ACGTACGT C C A G G G A A A G C A T ATCGA G G ACGTACGTCTG C T T CGATCGATGTA C T C A C CGATCGATGTA A AGC GCATCGATCGATGTACAGCTACGTACGTCTG A G TG C GCAT GCA CG G ACAGCTACGTACGTCTG AGCTACGTACGTCTG CT A G T T C C GTCTGAGCATCG T AGC A GCA A C T TGT T T  T C  C T  T C  C  A A C T C A G CGT G T G T A G  G C A G A G C A T T G G T  C G A G C A C A G C T T  G A C G C C G A A C T T  )  %  (    e  t  a r   r o r r  E  8  6  4  2  0  0  100  200  Flow #  300  400  Fig.
6.
Per-flow error rates of the rounding algorithm, using soft clipping.
As expected, the error rate increases as the sequencing process progresses, even after clipping.
The dependency of the error rate on the position in the wash cycle is also evident.
Similarly to Figure 4, flows that are 11th or 27th within a cycle (marked red) display a considerably lower error rate, whereas flows that are 13th within a cycle (marked green) display con- siderably higher error rates  per-flow error rates.
The rounding algorithm had an average error rate of 0.88% per flow (Fig.
6).
We note that this is prob- ably the most common pipeline used in re-sequencing experi- ments.
Running FlowgramFixer yielded an average error rate of 0.7%, a reduction of   21% compared with the baseline.
To test the robustness of this analysis to the choice of clipping method, we also tried hard clipping the reads at 200 and 300 nt.
i350  Fig.
7.
Error rate difference between the rounding method and FlowgramFixer (baseline error rate   FlowgramFixer error rate).
The average difference of error rate grows as the sequencing process pro- gresses, as expected because of the noisier signal obtained at later flows.
Although at some flows, the error rate decreases by as much as 3.4%, at other flows the error rate actually increases.
Interestingly, the error rate difference also displays a dependency on the position in the wash cycle  In these cases, FlowgramFixer reduced the error rate by 17 and 21%, respectively.
We then compared the error rates of the two methods, per position (Fig.
7).
Although the maximum obtained difference is as high as 3.4%, there are other positions where rounding actu- ally does slightly better than FlowgramFixer.
We believe that this may be because the variability in the noise at some positions of the wash cycle increases as the sequencing process progresses.
We discuss possible solutions in Section 5.
5 DISCUSSION  We have focused on developing a general inference framework without making it overly reliant on the current intricacies of Ion Torrent s platform.
However, there are several possible exten- sions that, although making the approach less robust to technol- ogy changes, could improve its performance on today s datasets.
We discuss several such ideas later in the text.
Our noise model relies on a intercept and trend model for the standard deviation (SD) parameter.
One might suggest richer models, including more complicated dependency of the SD on the flow index, dependency of the SD on the number of incor- porated nucleotides and a dependency on the position along the basic 32-nt wash cycle.
We briefly experimented with these ideas and were not able to find a richer model that improved the re- sults while maintaining a reasonable running time.
However, exploring these ideas further seems worthwhile.
Additionally, we suggest that additional accuracy gains might be gained by adding a spatial structure to the noise model, as nearby wells experience similar artifacts during the sequencing process.
Our approach has the advantage that phase correction is done by Ion Torrent s software before our analysis, thus reducing running times.
However, one can think of combining the phasing and the calling algorithms into one probabilistic framework.
Such a framework could help eliminate some of the artifacts introduced by the phasing algorithm and improve the quality of both the phasing and base-calling.
The use of smarter priors and better parameters can also improve the accuracy.
Some Ion Torrent reads contain test frag- ments of pre-determined DNA sequence, which can be used to optimize parameter values, such as our  .
Furthermore, our max- imum-likelihood framework allows for easy inclusion of priors on GC-content and homopolymer lengths.
We suspect that incorporating an empirical Bayes before as in Quinlan et al.
(2008) would increase the accuracy of our method.
The impact of such priors would be greatest for genomes where the GC- content is different from 0.5, unlike E.coli.
The dynamic programming approach allows for other relevant extensions.
For example, a forward backward algorithm, similar to the forward algorithm, can be used to compute the marginal distributions of the flow values and derive statistically sound quality scores.
Finally, we note that our approach is embarrassingly paral- lelizable and low-memory.
We, therefore, believe it could be run in a matter of minutes on a multi-core machine.
Moreover, if incorporated into the Ion Torrent pipeline, it could be run  live  as the sequencing process happens, making the running time inconsequential.
In fact, the running time of our algorithm is similar to the running time of the subsequent alignment step  therefore, we believe that as long as the running time of our method remains reasonable, it should not be a bottleneck for end-users.
6 CONCLUSION  Although we are encouraged by the results of FlowgramFixer presented here, we recognize the quick pace at which technology evolves.
As Ion Torrent continues to improve its sequencing technology (e.g.
its new Ion Proton sequencing platform), it is likely that important parameters, such as the wash cycle, will evolve and the specific error profiles we observe today will evolve as well.
However, we believe our major innovation  that inference should and could be done efficiently on the whole flowgram rather than flow-by-flow will remain relevant  Improved base-calling for Ion-Torrent via state-machines  for any future flowgram-based technology.
Such technologies have been a major workhorse of the scientific community for several years, and it is likely they would remain relevant in upcoming years.
ACKNOWLEDGEMENTS  The authors thank Saharon Rosset and four anonymous reviewers for helpful comments and Robert Harris for assistance with the implementation of FlowgramFixer.
Funding: D.G.
is a Colton fellow and was also supported in part by a fellowship from the Edmond J. Safra Center for Bioinformatics at Tel-Aviv University.
Conflict of Interest: none declared.
REFERENCES  Balzer,S.
et al.
(2010) Characteristics of 454 pyrosequencing data enabling realistic  simulation with flowsim.
Bioinformatics, 26, i420 i425.
Baum,L.
and Petrie,T.
(1966) Statistical inference for probabilistic functions of finite  state markov chains.
Ann.
Math.
Stat., 37, 1554 1563.
Beuf,K.
et al.
(2012) Improved base-calling and quality scores for 454 sequencing  based on a Hurdle Poisson model.
BMC Bioinformatics, 13, 303.
Durbin,R.
et al.
(1998) Biological Sequence Analysis: Probabilistic Models of  Proteins and Nucleic Acids.
Cambridge University Press, Cambridge, UK.
Eisenstein,M.
(2012) The battle for sequencing supremacy.
Nat.
Biotechnol., 30,  1023 1026.
Hopcroft,J.E.
and Ullman,J.D.
(1979) Introduction to Automata Theory, Languages  and Computation.
Addison-Wesley, Reading, MA, USA.
Langmead,B.
and Salzberg,S.L.
(2012) Fast gapped-read alignment with Bowtie 2.
Nat.
Methods, 9, 357 359.
Ledergerber,C.
and Dessimoz,C.
(2011) Base-calling for next-generation sequencing  platforms.
Brief.
Bioinform., 12, 489 497.
Lysholm,F.
et al.
(2011) FAAST: flow-space assisted alignment search tool.
BMC Bioinformatics, 12, 293.
Merriman,B.
et al.
(2012) Progress in Ion Torrent semiconductor chip based sequen-  cing.
Electrophoresis, 33, 3397 3417.
Quail,M.
et al.
(2012) A tale of three next generation sequencing platforms: com- parison of Ion Torrent, Pacific Biosciences and Illumina MiSeq sequencers.
BMC Genomics, 13, 341.
Quince,C.
et al.
(2011) Removing noise from pyrosequenced amplicons.
BMC Bioinformatics, 12, 38.
Quinlan,A.R.
et al.
(2008) Pyrobayes: an improved base caller for SNP discovery  in pyrosequences.
Nat.
Methods, 5, 179 81.
Rothberg,J.M.
et al.
(2011) An integrated semiconductor device enabling  non-optical genome sequencing.
Nature, 275, 348 352.
Vacic,V.
et al.
(2008) A probabilistic model for small RNA flowgram matching.
In:  Pacific Symposium on Biocomputing.
pp.
75 86.  i351
