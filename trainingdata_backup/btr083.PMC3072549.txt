            btr083.dvi [11:38 21/3/2011 Bioinformatics-btr083.tex] Page: 1121 11211127 BIOINFORMATICS ORIGINAL PAPER Vol.
27 no.
8 2011, pages 11211127doi:10.1093/bioinformatics/btr083 Systems biology Advance Access publication February 23, 2011 Interactive, multiscale navigation of large and complicated biological networks Thanet Praneenararat1,,, Toshihisa Takagi1,2,3 and Wataru Iwasaki1, 1Department of Computational Biology, The University of Tokyo, Kashiwa, Chiba 277-8568, 2National Bioscience Database Center, Japan Science and Technology Agency, Chiyoda, Tokyo 102-0081 and 3Center for Information Biology, National Institute of Genetics, Mishima, Shizuoka 411-8540, Japan Associate Editor: Trey Ideker ABSTRACT Motivation: Many types of omics data are compiled as lists of connections between elements and visualized as networks or graphs where the nodes and edges correspond to the elements and the connections, respectively.
However, these networks often appear as hair-ballswith a large number of extremely tangled edgesand cannot be visually interpreted.
Results: We present an interactive, multiscale navigation method for biological networks.
Our approach can automatically and rapidly abstract any portion of a large network of interest to an immediately interpretable extent.
The method is based on an ultrafast graph clustering technique that abstracts networks of about 100 000 nodes in a second by iteratively grouping densely connected portions and a biological-property-based clustering technique that takes advantage of biological information often provided for biological entities (e.g.Gene Ontology terms).
It was confirmed to be effective by applying it to real yeast protein network data, and would greatly help modern biologists faced with large, complicated networks in a similar manner to how Web mapping services enable interactive multiscale navigation of geographical maps (e.g.Google Maps).
Availability: Java implementation of our method, named NaviCluster, is available at http://navicluster.cb.k.u-tokyo.ac.jp/.
Contact: thanet@cb.k.u-tokyo.ac.jp Supplementary information: Supplementary data are available at Bioinformatics online.
Received on October 22, 2010; revised on January 31, 2011; accepted on February 9, 2011 1 INTRODUCTION In the post-genomic era, a great number of biological data that are available via the Internet or obtained through high-throughput experiments are significantly inhibiting researchers from making sense of the data and communicating them to others in a concise and meaningful way (Evanko, 2010).
Among these, one data type that has become increasingly common is binary relationship data, which are defined as sets of elements and 1-to-1 associations To whom correspondence should be addressed.
The authors wish it to be known that, in their opinion, the first and the last authors should be regarded as joint First Authors.
between them.
Proteinprotein interactions (PPI), correlatively expressed gene pairs, and genetic regulatory relationships exemplify this data type.
They are conventionally presented using network (graph) visualization where nodes (vertices) and edges correspond to the elements and associations, respectively (Merico et al., 2009; Suderman and Hallett, 2007).
The network visualization is widely used because it is typically assumed to be more interpretable by humans than a long list of associations.
High quality visualization should allow for effective investigation of the information, hypothesis generation and biological discovery (Merico et al., 2009).
Unfortunately, network representations often fail to effectively convey information to readers in cases where the networks are large and complicated (e.g.>100 edges).
The drawings of such networks, referred to as hair balls (Suderman and Hallett, 2007), occur frequently when analyzing high-throughput biological data.
To avoid being overwhelmed by such complicated networks, effective navigation approaches that can abstract data properly and present them insightfully at a right level of detail are hence required (Gehlenborg et al., 2010; Hu et al., 2007; ODonoghue et al., 2010).
Hierarchical clustering is a technique used with many types of data, including networks or graphs, that meaningfully groups data elements in a recursive manner, thereby producing a hierarchy, or tree, of clusters (Andreopoulos et al., 2009) (Supplementary Figure S1).
Higher levels in the hierarchy contain fewer, larger clusters, each of which encompasses more data elements (or nodes, in the case of networks) than lower levels.
In the case of hairballs, some methods (Abello et al., 2006; Freeman et al., 2007; Pavlopoulos et al., 2009; Royer et al., 2008; Vlasblom et al., 2006) use hierarchical clustering to create an interpretable visualization by displaying only the high-level clusters, thereby reducing the number of elements in the figure and abstracting the networks (e.g.the top panel in Supplementary Figure S1).
By descending the hierarchy and showing the actual members of each cluster, detailed information can still be intuitively shown at a particular scale (e.g.the dotted arrows and regions in Supplementary Figure S1).
A recent study reported that natural networks display hierarchical properties (Clauset et al., 2008), suggesting that hierarchical clustering of biological networks is both reasonable and promising.
Despite the advantages of hierarchical clustering, existing visualization methods using this technique have some drawbacks that hinder effective investigation of large biological datasets.
First, some methods (Freeman et al., 2007; Shannon et al., 2003; Vlasblom et al., 2006) require researchers to provide information on The Author(s) 2011.
Published by Oxford University Press.
This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/2.5), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.
[11:38 21/3/2011 Bioinformatics-btr083.tex] Page: 1122 11211127 T.Praneenararat et al.hierarchies or clusters, data which is usually not known in advance.
Secondly, existing methods do not allow for flexible navigation beyond fixed cluster boundaries (Abello et al., 2006; Freeman et al., 2007; Pavlopoulos et al., 2009; Royer et al., 2008; Vlasblom et al., 2006).
In other words, they can visualize the members of one cluster at a time but do not support visualization and navigation of members of different clusters, despite the fact that nodes/clusters of interest to biologists may belong to various high-level nodes in the hierarchy (e.g.nodes in the light blue area in Supplementary Figure S1).
Thirdly, existing methods are inappropriate for interactive, realtime navigation.
Researchers frequently change their focus in the course of biological investigation to generate hypotheses and need to visualize different sets of nodes/clusters.
Thus the long running times (minutes to hours) needed to produce the abstractions are unacceptable (Abello et al., 2006; Enright et al., 2002; Pavlopoulos et al., 2009; Royer et al., 2008).
Methods that can provide appropriate abstractions of any given portion of the network rapidly and automatically, such as those that process about 100 000 nodes in seconds, are therefore necessary for efficient, interactive biological investigation.
In addition to the previously mentioned problems, the clustering techniques employed by existing methods are often insufficient for abstracting large networks to a level that is simple enough for interpretation (Abello et al., 2006; Pavlopoulos et al., 2009; Royer et al., 2008).
Recent investigations have revealed that in some common biological datasets, hub-like nodes tend to connect with low-degree nodes and the majority of nodes interact with only few partners (e.g.yeast PPI networks) (Yamada and Bork, 2009).
Large, densely connected regions of such networks are therefore quite few; instead, small, densely connected modules are more frequently found.
Consequently, even the highest level of the created hierarchies can contain over 100 clusters, resulting in cluttered and difficult to manage visualizations.
Therefore, means for further abstraction are required to allow for effective navigation of large biological networks.
We developed an interactive, multiscale network navigation method with three advantages: (i) our method can work without a user-provided hierarchy; (ii) the method can rapidly, automatically and interactively produce abstractions of any region of the network, including nodes/clusters belonging to different ancestors in the hierarchy; and (iii) an intuitive visualization with a manageable amount of information is reliably produced at every step of navigation.
The effectiveness of our method was confirmed using real yeast protein network data.
Our approach will aid modern biologists faced with large and complicated network data.
2 METHODS Our method consists of three components: an ultrafast graph clustering component, a property-based clustering component, and an interface that presents an abstracted view and permits researchers to flexibly choose nodes/clusters (Fig.1).
First, the method abstracts the whole network using the ultrafast graph clustering component.
It detects topologically dense, connected regions, which may correspond to biologically meaningful clusters, such as protein complexes.
It rapidly identifies clusters in huge networks of about 100 000 nodes within a few seconds, thus particularly suitable to be applied to the problem of interactive navigation of large and complicated networks.
Additionally, if the property-based clustering needs to be executed afterwards, this graph clustering method displays another advantage in that it significantly reduces the number of clusters to be input to the next slower clustering.
Clusters Found (Louvain Clusters) Extract densely connected portions Further Grouped LCs Subnetwork Corresponding to Various Operations (e.g., Zooming and Re-centering) Yes No Input Ultrafast Graph Clustering Abstracted View with User Interface # LCs > threshold?
Group LCs with similar properties Property-Based Clustering Show clusters and meta/property edges between them Fig.1.
A diagram of the presented method.
For details, see the main text.
Secondly, in case the abstraction is insufficient because of the characteristics of the biological network, the property-based clustering component further abstracts the network to an extent sufficient for visual interpretation.
This component automatically groups clusters with similar biological properties by utilizing the fact that biological entities are often assigned property information, such as Gene Ontology (GO) terms.
The new clusters resulting from the property-based clustering are used in the next component instead of those generated by the ultrafast graph clustering component, thereby reducing the number of clusters on the screen.
There are two main advantages of the property-based clustering: (i) the propertybased clustering allows researchers to directly control the number of clusters shown on the screen through a parameter K of its underlying algorithm.
To solve the problem of the cluttered visualization produced by applying only the graph clustering, the number of clusters shown on the screen must be decreased to an extent that biologists can manage to interpret.
In addition, because the preferred numbers of clusters on the screen might differ according to the circumstances, it is important that biologists be allowed to adjust the number of clusters displayed; and (ii) because the clusters generated by the property-based clustering are based on the property information that carries biological meaning, the clusters are expected to be highly intuitive.
Thirdly, the resultant clusters/nodes are immediately displayed with metaedges and property edges, which represent the numbers of edges that exist between any members of two clusters and the similarities between their properties, respectively.
In the case that the number of clusters is less than the parameter K , the biggest cluster is recursively split until either the number of the clusters is equal to K or breaking only one more cluster makes the number of the clusters larger than K. While showing the abstracted view, the interface allows researchers to interactively zoom, move laterally beyond cluster boundaries, focus on an arbitrary set of clusters/nodes, etc.
Any subset of the entire network of particular interest to the researcher can be fed into the clustering components and the abstracted view of that cluster is displayed.
This cycle can be completed in a few seconds on a typical PC with a CPU of about 2 GHz and a memory of about 1 GB for datasets with 100 000 nodes, permitting truly interactive navigation of large biological networks.
2.1 Graph clustering Graph clustering detects clusters in networks by finding densely connected sets of nodes where weighted connections of nodes within the sets are stronger/denser than weighted connections between nodes inside and outside 1122 [11:38 21/3/2011 Bioinformatics-btr083.tex] Page: 1123 11211127 Interactive, multiscale navigation of large networks of the set.
This metric is called the modularity, or Q function (Newman and Girvan, 2004), and numerous graph clustering algorithms have been developed to identify clusters that optimize modularity (Blondel et al., 2008; Clauset et al., 2004; Newman and Girvan, 2004; Wakita and Tsurumi, 2007).
The NewmanGirvan is a well-known, pioneering algorithm that iteratively removes edges most likely to lie between clusters, splitting the clusters into two, until no edges remain (Newman and Girvan, 2004).
This process results in a dendrogram (a tree showing the order of the splits) and the best clustering can be identified from this tree by choosing the split with the highest modularity.
This algorithm has a high computational cost, as it requires a traversal of all remaining edges at every step.
Until recently, the best known algorithm developed to overcome this shortage with nearlinear time complexity was devised by Wakita and Tsurumi (Wakita and Tsurumi, 2007).
However, the speed of this algorithm was still insufficient and the quality of the clusters produced had room for improvement when incorporated into an interactive navigation of large networks (e.g.human gene networks of >20 000 nodes) (Blondel et al., 2008).
Recently, Blondel et al.(2008) developed a breakthrough algorithm for quickly identifying high modularity clusters in huge networks of about 100 000 nodes (the Louvain algorithm).
We found that this algorithm for finding meaningful communities in large and complicated networks could be applied to the problem of interactive navigation.
2.2 The Louvain algorithm The Louvain algorithm works in two phases, as follows: (1) Starting from the state that each node belongs to a cluster different from every other node, for each node the algorithm considers its neighbors clusters and moves the node to a neighboring cluster.
The cluster to be joined is determined by choosing the movement that results in the highest positive modularity gain among all possible movements to the nodes neighboring clusters.
If no movements result in a positive gain in modularity, the node is not moved.
This process is repeated until no members are added to/removed from any clusters and yields clusters with the maximum local modularity.
(2) Every cluster from Phase 1 is then treated as a new node.
For each pair of new nodes, an edge connecting them exists if there is at least one edge between any member of one of the new nodes and any member of the other.
Edge weights are determined based on the number of previous edges.
Self-loops are drawn on nodes to represent corresponding inter-cluster edges.
The output of Phase 2 is then fed back to Phase 1 and the algorithm iteratively runs these two phases until no additional changes are made.
More details of this algorithm can be found in (Blondel et al., 2008).
This algorithm can finish clustering networks of 70 000 nodes in one second (Blondel et al., 2008).
Thus, it works swiftly on many biological networks that generally contain less than 100 000 nodes (e.g.yeast or human PPI networks).
The ultrafast speed of the algorithm is essential for accomplishing the goal of truly interactive navigation of large networks.
The clusters produced by this algorithm, which we call Louvain clusters or LCs, are characterized by high modularity.
It has been shown that clusters with high modularity in biological networks correspond to biologically functional units [e.g.protein complexes in PPI networks and transcriptional modules in gene regulatory networks (Dunn et al., 2005)].
Thus, the LCs are expected to be intuitive and meaningful groups in navigation of biological networks.
Note that it is also possible to continue Louvain clustering to further reduce the number of clusters, even if the gain in modularity becomes negative.
However, in such cases, the biological intuitiveness of the clusters produced would be lowered due to the decreased modularity (Dunn et al., 2005).
Therefore, at this stage, it would be better to adopt another reliable source of information, in addition to the topology of the networks.
2.3 Property-based clustering The property-based clustering component aims to decrease the complexity remaining after the application of the Louvain algorithm by further grouping LCs based on property information typically associated with the nodes (Supplementary Figure S2).
The visualization step displays the clusters resulting from the property-based clustering instead of those generated by the graph clustering approach, thereby reducing the number of clusters on the screen.
The VisANT tool works similarly to our property-based clustering and offers integrated visualization of the GO hierarchy and userspecified networks, but it requires the user to manually create clusters containing the same GO terms (Hu et al., 2009).
In contrast, our propertybased clustering automatically generates clusters having similar properties to achieve interactive navigation.
Let N be the number of nodes in the original input graph and L be the number of LCs.
For each n, where 1nN , node vn has a set of terms, T (vn ), that denotes the properties of the node (e.g.a set of GO terms).
A weight, w (t ), is given to each term t to quantify its importance (e.g.properties that are rare and/or of particular interest to researchers may be given higher weights).
Let Tall 1nN T (vn ) and Tall = { tj 1 j|Tall| }.
For each LC, LCl , where 1 lL, let Prop (t,LCl )=| { vLCl|t T (v ) }|/|LCl|.
Then the property vector for LCl or PV (LCl ) is a |Tall|-dimensional vector whose j-th element is the score of term tj , which is calculated as w (tj )Prop (tj,LCl ).
(Note that, in our implementation, a property term to be used for labeling LCl is the term th which is w (th )Prop (th,LCl )w (tj )Prop (tj,LCl ),j,1 j |Tall|.)
Next, the similarity between two LCs, LCa and LCb, is given as a normalized dot product of the two property vectors; that is, Sim (LCa,LCb )= PV (LCa )PV (LCb )/|PV (LCa )||PV (LCb )|.
Then LCs having similar property vectors are grouped by the Farthest First Traversal K-center (FFT) algorithm (Andreopoulos et al., 2009).
The FFT algorithm is a complexityreducing variant of the K-means algorithm, where initial K cluster centers are chosen as follows.
The first center (vector) is chosen randomly and each remaining center is determined by greedily choosing a vector farthest from the set of already chosen centers.
The rest of the vectors are assigned to the cluster to which they are most similar.
3 IMPLEMENTATION The proposed method was implemented as a Java 6 Swing application with a graphical interface for flexible navigation.
The JUNG (Java Universal Network/Graph Framework) library (http://jung.sourceforge.net) was employed to create the visualization.
Three input files are required to run the application: a node list file, an edge list file and a property information file.
The node list file describes node names, property terms annotated with the nodes, and database names and IDs used in those databases (e.g.SGD for yeast proteins).
The database information is used to provide URL links.
The edge list file contains connected pairs of node names and the weights of the connections (weights describe how strongly the nodes are connected).
The property information file describes the property terms in the node list file: terms IDs, names, display names (used in labeling clusters in abstracted views), namespaces, default weights and their parent terms.
In the case of the GO property information file bundled with the software, the default weights are terms depths in the GO hierarchy.
This treats more specific terms as more important properties.
In addition, each term belongs to one of three namespaces (biological process, molecular function or cellular component).
By using the namespace information, researchers can put heavier weights on all biological process terms at once if they want to group nodes having similar biological process terms, rather than other namespace terms.
If parent terms are provided for each term, they are automatically 1123 [11:38 21/3/2011 Bioinformatics-btr083.tex] Page: 1124 11211127 T.Praneenararat et al.assigned to the nodes that the term annotates as well.
The is_a and part_of relationships in GO are handled by this entry.
The implemented software, NaviCluster, works on any platform that can run Java 6.
The program has a minimum memory requirement of 1 GB for networks of about 100 000 edges.
In addition to the highlighted features, NaviCluster has many additional functions designed for interactive network navigation.
Views containing only nodes/clusters that the user wants to explore can be created, as well.
Undo/Redo functions allow users to easily move backwards and forwards between previously created network views.
As previously mentioned, users can adjust the namespace factors to change their importance, which changes the weights of all terms in the same namespaces, as long as at least one namespace weight is not zero.
Furthermore, the number of clusters resulting from the property-based clustering, 12 by default, can be freely changed to match the individual p
