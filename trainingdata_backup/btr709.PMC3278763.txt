            [15:15 9/2/2012 Bioinformatics-btr709.tex] Page: 573 573580 BIOINFORMATICS ORIGINAL PAPER Vol.
28 no.
4 2012, pages 573580doi:10.1093/bioinformatics/btr709 Data and text mining Advance Access publication January 12, 2012 Robust rank aggregation for gene list integration and meta-analysis Raivo Kolde1,2, Sven Laur1, Priit Adler1,3 and Jaak Vilo1,2, 1Institute of Computer Science, University of Tartu, Liivi 2-314, 50409 Tartu, 2Quretec, likooli 6a, 51003 Tartu and 3Institute of Molecular and Cell Biology, University of Tartu, Riia 23, 51010 Tartu, Estonia Associate Editor: Jonathan Wren ABSTRACT Motivation: The continued progress in developing technological platforms, availability of many published experimental datasets, as well as different statistical methods to analyze those data have allowed approaching the same research question using various methods simultaneously.
To get the best out of all these alternatives, we need to integrate their results in an unbiased manner.
Prioritized gene lists are a common result presentation method in genomic data analysis applications.
Thus, the rank aggregation methods can become a useful and general solution for the integration task.
Results: Standard rank aggregation methods are often ill-suited for biological settings where the gene lists are inherently noisy.
As a remedy, we propose a novel robust rank aggregation (RRA) method.
Our method detects genes that are ranked consistently better than expected under null hypothesis of uncorrelated inputs and assigns a significance score for each gene.
The underlying probabilistic model makes the algorithm parameter free and robust to outliers, noise and errors.
Significance scores also provide a rigorous way to keep only the statistically relevant genes in the final list.
These properties make our approach robust and compelling for many settings.
Availability: All the methods are implemented as a GNU R package ROBUSTRANKAGGREG, freely available at the Comprehensive R Archive Network http://cran.r-project.org/.
Contact: vilo@ut.ee Supplementary information Supplementary data are available at Bioinformatics online.
Received on April 23, 2011; revised on November 28, 2011; accepted on December 21, 2011 1 INTRODUCTION Data integration plays an important role in the analysis of highthroughput data.
As the outputs of individual experiments can be rather noisy, it is essential to look for findings that are supported by several pieces of evidence to increase the signal and lessen the fraction of false positive findings.
The structure of the data and specific research questions largely dictate the methods used in integration.
Still, some very general techniques for aggregation of genomic data have been proposed such as the Bayesian networks (Troyanskaya et al., 2003) and the Kernel methods (Bie et al., 2007).
In this work, we limit ourselves to the situation where all the data sources are represented as prioritized lists of genes.
This is To whom correspondence should be addressed.
a very natural way to represent a result of a genome-wide study and, therefore, ubiquitous in different types of analyzes.
Finding a meaningful combination of different data sources is often a non-trivial task.
For example, differences in measurement platforms and lab protocols can render gene expression levels incomparable.
Hence, it might be better to analyze different datasets separately and then aggregate the resulting gene lists.
Such a strategy has been employed to finding gene co-expression networks (Lee et al., 2004; Stuart et al., 2003) and for defining more robust sets of cancer-related genes (Griffith et al., 2006).
Another example is the study by Aerts et al.(2006), where the authors combined different kinds of data sources to find disease-related genes.
For this they ranked genes by similarity to the disease genes in the Gene Ontology (GO), pathways, transcription factor binding sites, sequence and literature and subsequently aggregated these rankings to get the final result.
Boulesteix and Slawski (2009) used an analogous methodology to combine results of differential expression analysis.
Combining preference lists into a single ranking is known as rank aggregation.
This problem has a rich history in the fields of information retrieval (Dwork et al., 2001a) and theory of social choice (Copeland, 1951).
In these contexts, the main focus is on the correctness of the resulting ranking.
For example, in elections it is critical that each vote gets counted and represented in the final result.
However, finding the best ranking is often computationally very expensive, for example the one that minimizes the misplacement or so-called bubble sort distance, and thus applicable only for a relatively small class of problems.
(Dwork et al., 2001b; Pihur et al., 2007).
Data from high-throughput genomic experiments usually contains a significant proportion of noise and thus correctness is not right objective for these kinds of studies.
For such settings, a good rank aggregation method must be robust enough to find a relevant ranking even in the presence of unreliable or irrelevant inputs.
Since it possible that all rankings are meaningless in the context of a particular study, the method should also quantify the reliability or significance of the results.
Finally, the method should be applicable also for partial or top rankings only, since full rankings are often unavailable, e.g.gene lists derived from articles or various tools and databases.
In this article, we propose a novel rank aggregation method based on order statistics that achieves all described objectives.
Stuart et al.(2003) were the first to utilize order statistics in rank aggregation.
The computational scheme for their method was further optimized by Aerts et al.(2006).
This algorithm compares the actual rankings with the expected behavior of uncorrelated The Author(s) 2012.
Published by Oxford University Press.
This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/3.0), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.
[15:15 9/2/2012 Bioinformatics-btr709.tex] Page: 574 573580 R.Kolde et al.rankings, re-ranks the items and assigns significance scores.
While being robust to noise, this method requires simulations to define significance thresholds (Aerts et al., 2006) and does not support incomplete lists.
To overcome these limitations, we propose a new algorithm that is both computationally efficient and statistically stable.
For each item, the algorithm looks at how the item is positioned in the ranked lists and compares this to the baseline case where all the preference lists are randomly shuffled.
As a result, we assign a P-value for all items, showing how much better it is positioned in the ranked lists than expected by chance.
This P-value is used both for re-ranking the items and deciding their significance.
We also extended this methodology to the case where only top elements in the lists are available.
Compared with the common approach of counting the appearances of each item (Griffith et al., 2006; Lee et al., 2004), our method is clearly an improvement.
It also takes into account the positional information and assigns significance levels to the findings according to a theoretical model.
All methods described in this article, including average rank and the method by Aerts et al.(2006), are implemented as a GNU R package RobustRankAggreg.
2 ROBUST RANK AGGREGATION Let m be the number of objects and n be the number of preference lists.
For instance, n might be the number of experiments and m the number of genes studied.
Moreover, assume that in each survey genes are ordered according to their impact so that the ones most likely to behave in a certain way are in the beginning of the list.
Then the rank of a gene is just the position in this ordering.
If we divide ranks by the maximal rank value m, we obtain normalized ranks with the maximal value of 1.
For each gene let the corresponding rank vector r= (r1,...,rn) be such that rj denotes the normalized rank of the gene in the j-th preference list.
A general strategy for obtaining an aggregated preference list is to score each rank vector somehow and order the genes based on the scores.
Note that relative ranks can be used even if the preference lists contain slightly different sets of genes.
This is quite a common scenario.
For example, we might want to aggregate lists from different microarray platforms where each of them measures a unique subset of genes.
To take this into account, we have to adjust the maximal rank m according to the number of elements in each list in the normalization step and use a scoring method that produces comparable scores even if the length of rank vector varies.
Classical rank aggregation methods try to maximize the coherence of the final ranking with all the p
