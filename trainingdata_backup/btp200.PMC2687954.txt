            G:\fpp\tex\journals\oup\BioInfo\Bioinfo-25-ISMB-ECCB\btp200.dvi [09:57 15/5/2009 Bioinformatics-btp200.tex] Page: i169 i169i178 BIOINFORMATICS Vol.
25 ISMB 2009, pages i169i178doi:10.1093/bioinformatics/btp200 A general computational method for robustness analysis with applications to synthetic gene networks Aurlien Rizk, Gregory Batt, Franois Fages and Sylvain Soliman INRIA Paris-Rocquencourt, 78153 Le Chesnay Cedex, France ABSTRACT Motivation: Robustness is the capacity of a system to maintain a function in the face of perturbations.
It is essential for the correct functioning of natural and engineered biological systems.
Robustness is generally defined in an ad hoc, problem-dependent manner, thus hampering the fruitful development of a theory of biological robustness, recently advocated by Kitano.
Results: In this article, we propose a general definition of robustness that applies to any biological function expressible in temporal logic LTL (linear temporal logic), and to broad model classes and perturbation types.
Moreover, we propose a computational approach and an implementation in BIOCHAM 2.8 for the automated estimation of the robustness of a given behavior with respect to a given set of perturbations.
The applicability and biological relevance of our approach is demonstrated by testing and improving the robustness of the timed behavior of a synthetic transcriptional cascade that could be used as a biological timer for synthetic biology applications.
Availability: Version 2.8 of BIOCHAM and the transcriptional cascade model are available at http://contraintes.inria.fr/BIOCHAM/ Contact: gregory.batt@inria.fr 1 INTRODUCTION Robustness can be defined as the capacity of a system to maintain a function in the face of perturbations.
Over the years, many studies have demonstrated theoretically and experimentally that robustness is a key property of numerous biological processes, and have proposed mechanisms that promote robustness (e.g.Barkai and Leibler, 1997; Batt et al., 2007; Chaves et al., 2007; Ciliberti et al., 2007; Davidson and Levine, 2008; El-Samad et al., 2005; Gonze et al., 2002; Ingolia, 2004; Shen et al., 2008; Shinar et al., 2007; Stelling et al., 2004b; von Dassow et al., 2000).
Robustness is now regarded as one of the fundamental characteristics of biological systems because it allows their correct functioning in presence of molecular noise and environmental fluctuations.
Excellent reviews have surveyed the role of biological robustness, and discussed its interesting relations with evolvability of biological systems, modularity of biological networks and the trade-off between robustness and fragility (e.g.Kitano, 2004; Stelling et al., 2004a; Yi et al., 2000).
In particular, in the context of synthetic biology, these are key issues to take into account at the design level.
Intuitively, the notion of robustness seems easy to define.
One considers (i) a particular system, (ii) a particular function and (iii) a particular set of perturbations, and one assesses how perturbations affect (or not) the given function.
However, with the notable exception of Kitano (2007), no general formal definition of robustness has been proposed.
The precise definition of robustness is To whom correspondence should be addressed.
generally highly problem-specific.
This makes it difficult to discuss and compare the robustness found in different contexts, or even in similar contexts but computed using different formal definitions of robustness.
In Kitano (2007), the mathematical foundations of a theory of biological robustness is proposed, with the aim of providing a unified perspective on robustness.
Although very interesting from a theoretical point of view, Kitanos definition might be too general when applying it to particular problems.
Indeed the definition relies on a so-called evaluation function, defined using an unspecified, problemdependent real-valued performance function.
Here, we propose to define the evaluation function using the newly introduced notion of violation degree of temporal logic formulae (Fages and Rizk, 2008).
Intuitively, the violation degree reflects the distance between a particular behavior of the perturbed system, given as a numerical timed trace, and the expected reference behavior, expressed by a temporal logic formula.
Because (i) temporal logics are expressive languages to formalize temporal behavior of dynamical systems and (ii) the violation degree can be automatically computed, our instantiation of Kitanos definition is both general and computational.
The main contribution of our work is that we propose a computational approach forand an implementation ofthe automatic estimation of the robustness that applies to a broad class of dynamical properties and a large variety of possible perturbations.
We simply require that the property describing the expected behavior can be expressed in temporal logic and that the behavior of the system can be represented by a numerical trace (possibly obtained by numerical simulation of deterministic or stochastic models).
A second contribution of this work is that we propose two closely related but different notions of robustness that have been used indiscriminately in publications, namely the absolute robustness of a system, representing the average functionality of the system under perturbations, and the relative robustness with respect to a given nominal behavior of the system, quantifying the impact of perturbations on the nominal behavior.
We believe that distinguishing these two notions will help to clarify the analysis of robustness of biological systems.
Undoubtedly, formal definitions are useful for making this distinction.
The applicability and biological relevance of our approach is illustrated on the analysis of the robustness of the timed response of a synthetic transcriptional cascade built in Escherichia coli.
This system presents a high cell-to-cell variability that prevents using it as a biological timer.
We look for parameter modifications that improve the robustness of a well-timed behavior.
The remainder of this article is organized as follows.
In the next section, we provide a brief description of the violation degree notion introduced in Fages and Rizk (2008).
In Section 3, we present the proposed method for robustness estimation and its implementation in BIOCHAM 2.8.
In Section 4, we detail the application of our method 2009 The Author(s) This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/2.0/uk/) which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.
[09:57 15/5/2009 Bioinformatics-btp200.tex] Page: i170 i169i178 A.Rizk et al.to the analysis of the robustness of the synthetic transcriptional cascade.
2 VIOLATION DEGREE OF TEMPORAL LOGIC PROPERTIES We first define the Boolean semantics of linear temporal logic (LTL) on timed numerical traces (Section 2.1).
Then, we show how using the variable abstraction technique of Section 2.2, we can define a continuous satisfaction degree for temporal logic formulae (Section 2.3) better adapted to a quantitative notion of robustness.
2.1 Temporal logic semantics of numerical traces In this article, we consider that the behavior of a biological system is described by numerical timed traces.
These traces can be obtained either by experimentation on the actual system or by numerical simulation of stochastic or deterministic models.
Formally, a numerical trace is a finite sequence of tuples describing systems evolution with time: T = (s0,s1,...,sn), with si = (ti,xi,xi), (ti)i[0,n] being a strictly increasing sequence of time points, and xi,xi Rm being vectors of state variable values and of their derivatives at time ti.
In Figure 1a, a hypothetical evolution of a protein concentration is represented.
The associated trace is T = ((0,6,1.3),(2,8,0.8),...,(24,5,0)).
We use LTL to express dynamical properties of biological systems.
Temporal logics have been developed to specify the behavior of (usually discrete) dynamical systems (Emerson, 1990).
Typical properties include reachability (the system can reach a given state), inevitability (the system will necessarily reach a given state), invariance (a property is always true), response (an event necessarily triggers a specific behavior) and infinite occurrences of events (such as oscillations).
Illustrative examples of the expressiveness of temporal logics in systems biology can be found in Antoniotti et al.(2003); Batt et al.(2005); Bernot et al.(2004); Calzone et al.(2006) and Chabrier and Fages (2003).
LTL formulae are built using atomic propositions and LTL operators.
In our approach, atomic propositions express real-valued linear constraints on time, protein concentrations and their derivatives.
The infinite set of atomic propositions is denoted by.
LTL operators include the usual logical operators, such as negation (), logical and (), logical or () and implication (), and specific temporal operators, such as next (X), future (F), globally (G) and until (U).
X, F, G and U , respectively, mean that a property holds at the next time, at some future time, holds for all future times or holds continuously until another property holds.
These operators can be combined to express complex dynamical properties.
For example, the trace T represented in Figure 1a satisfies the formula 1 =F([A]>7F[A]<3), expressing that at some time point, protein A concentration exceeds 7 and later goes below 3.
Because negations can be pushed to atomic propositions with the usual duality properties of operators, and the set of atomic propositions is closed by negation, we consider without loss of generality only negation-free LTL formulae.
The standard semantics of LTL formulae is generally defined with respect to infinite executions, i.e.infinite traces.
Because in our case, the traces are finite, the usual semantics of LTL has to be adapted.
Let T = (s0,s1,...,sn) be a finite numerical trace,  be an atomic proposition and , be LTL formulae.
Then the semantics of LTL formulae with respect to finite traces is defined inductively as T |= iff s0 |=, and si |= iff si=(ti,xi,xi) satisfies with the usual semantics, si |= iff si |= and si |= , si |= iff si |= or si |= , si |=X iff i<n and si+1 |=, or i=n and sn |=, si |=F iff j[i,n] such that sj |=, si |=G iff j[i,n], sj |=, si |=U iff j[i,n] s. t. sj |= and k [i,j1], sk |=.
Our semantics of LTL coincides with the standard semantics used on finite traces completed by a self-loop on the last state (Fages and Rizk, 2008).
This semantics differs from the neutral semantics of Eisner et al.(2003) for finite traces only for the next operator, which in their definition is always false on the last state, whereas in our case it enjoys the duality property X=X and either X or X holds.
In practice, the next operator being mainly used to detect local extrema, this difference of interpretation is not significant.
It is worth noticing that when the numerical trace corresponds to a discrete representation of a continuous process, the discrete time semantics that we use may cause that particular events are missed independently of the numerical errors that can be made by the numerical integration method.
For example, the formula F([A]10) interpreted on trace T of Figure 1a and expressing that eventually [A] exceeds 10 might be found true or false depending Fig.1.
(a) Numerical trace depicting the time evolution of a protein concentration.
(b) Satisfaction domain DT ,(y) of QFLTL formula (y)=F([A]> y1 F[A]<y2) and trace T , and LTL formulae 1, 2 and 3, represented in formula space.
(c and d) Representation of satisfaction domains for three perturbations p1, p2, and p3.
Dpi denotes DTpi ,(y).
In (c), the intersection of satisfaction domains (shaded) is not empty and Rsds,P =3.
The property (y)=(3,4)=F([A]>3F[A]<4) is satisfied for all perturbations.
In (d), the intersection of satisfaction domains is empty and Rsds,P =.
i170 [09:57 15/5/2009 Bioinformatics-btp200.tex] Page: i171 i169i178 A general computational method for robustness analysis on the integration step and precision.
So care must be taken when checking temporal properties on finite discrete time traces [for a discussion, see Eisner et al.(2003); Fainekos and Pappas (2007) and Maler et al.(2008), and
