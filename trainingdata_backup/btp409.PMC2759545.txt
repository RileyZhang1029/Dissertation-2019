            G:\fpp\tex\journals\oup\BioInfo\Bioinfo-25(20)issue\btp409.dvi [17:19 21/9/2009 Bioinformatics-btp409.tex] Page: 2758 27582759 BIOINFORMATICS APPLICATIONS NOTE Vol.
25 no.
20 2009, pages 27582759doi:10.1093/bioinformatics/btp409 Systems biology FREDa framework for T-cell epitope detection Magdalena Feldhahn1,, Pierre Dnnes1,2, Philipp Thiel1 and Oliver Kohlbacher1 1Division for Simulation of Biological Systems, WSI/ZBIT, University of Tbingen, Sand 14, D-72076 Tbingen, Germany and 2Present address: Molecular Toxicology, Safety Assessment, AstraZeneca R&D, S-15185 Sdertlje, Sweden Received on March 8, 2009; revised on June 22, 2009; accepted on June 28, 2009 Advance Access publication July 6, 2009 Associate Editor: John Quackenbush ABSTRACT Summary: Over the last decade, immunoinformatics has made significant progress.
Computational approaches, in particular the prediction of T-cell epitopes using machine learning methods, are at the core of modern vaccine design.
Large-scale analyses and the integration or comparison of different methods become increasingly important.
We have developed FRED, an extendable, open source software framework for key tasks in immunoinformatics.
In this, its first version, FRED offers easily accessible prediction methods for MHC binding and antigen processing as well as general infrastructure for the handling of antigen sequence data and epitopes.
FRED is implemented in Python in a modular way and allows the integration of external methods.
Availability: FRED is freely available for download atContact: feldhahn@informatik.uni-tuebingen.de 1 INTRODUCTION The detection of T-cell epitopes is a critical step in vaccine design and a key problem in immunoinformatics.
Experimental studies to detect epitopes are expensive and time consuming.
Computational methods are able to reduce this experimental effort and thereby facilitate the process of epitope detection (DeLuca and Blasczyk, 2007).
Many computational methods (based on, e.g.positionspecific scoring matrices, various machine learning methods or structural information) have been developed for this task.
Many of these methods are freely available through the internet, however, few standalone implementations are available.
While web-based predictions are easy to use on the small scale, it severely hampers large-scale predictions and makes a direct comparison of individual methods difficult.
The development of flexible prediction and analysis pipelines that can handle large amounts of data and combine prediction methods becomes increasingly important.
These pipelines include extensive and flexible pre-and post-processing in addition to the application of a prediction method.
The web-based methods available today do not offer tools for flexible data processing.
Since there is no uniform interface to access these methods it is difficult to include them into automated prediction pipelines.
One option to provide convenient and coherent interfaces to immunoinformatics tools is through web services (Halling-Brown et al., 2009); however, To whom correspondence should be addressed.
speed and availability tend to limit this approach particularly for large-scale studies.
Here, we present FRED, a software framework for computational immunomics, that provides a uniform interface for a variety of prediction methods and support for the implementation of customtailored prediction pipelines.
FRED offers methods for extensive data processing as well as methods to assess and compare the performance of the prediction methods.
This makes it a powerful platform for the rapid development of new algorithms and the analysis of large datasets.
2 METHODS 2.1 Implementation FRED provides methods for sequence input, sequence preprocessing, filtering and display of the results.
The general organization of FRED is depicted in Figure 1.
The single prediction methods are accessed internally via a consistent interface.
FRED can handle polymorphic sequences (e.g.for the study of single nucleotide polymorphisms (SNPs) in an epitope context) and offers the possibility of accessing different methods simultaneously and of combining, comparing or benchmarking the methods.
FRED is easily extendable by user-defined prediction methods or methods for filtering of results.
FRED is implemented in Python (release 2.6) (www.python.org).
All additional software required for FRED is freely available and installation packages are included in the FRED package.
The prediction methods currently available in FRED are listed in Table 1.
3 APPLICATIONS Tutorial and documentation: with the FRED package, we provide examples that demonstrate how FRED can be used to solve typical tasks in computational immunomics with short and simple scripts.
A detailed tutorial is available on the projects web site.
It explains how to implement prediction pipelines, offers more detailed information on the functionality of FRED and addresses problems like choosing the right prediction method or threshold.
We additionally provide a detailed documentation of the code.
Vaccine design: the selection of peptides for epitope-based vaccines is a typical application for large-scale predictions of MHC binding peptides.
The following short and simple program implements a typical scenario for the selection of conserved peptide candidates for a vaccine against a virus.
The scenario is based on the paper by Toussaint et al.(2008): a set of sequences of the hepatitis C virus core protein from four different subtypes is used.
All peptides that occur 2009 The Author(s) This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/2.0/uk/) which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.
[17:19 21/9/2009 Bioinformatics-btp409.tex] Page: 2759 27582759 FRED Fig.1.
FRED is organized into four major parts: sequence input, application of prediction methods, filtering of the results and model testing.
Table 1.
Prediction methods currently integrated in FRED Method
