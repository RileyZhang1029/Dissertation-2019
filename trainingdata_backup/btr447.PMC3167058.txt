            btr447.dvi [09:52 19/8/2011 Bioinformatics-btr447.tex] Page: 2502 25022509 BIOINFORMATICS ORIGINAL PAPER Vol.
27 no.
18 2011, pages 25022509doi:10.1093/bioinformatics/btr447 Sequence analysis Advance Access publication August 2, 2011 SEED: efficient clustering of next-generation sequences Ergude Bao1, Tao Jiang1, Isgouhi Kaloshian2 and Thomas Girke3, 1Department of Computer Science and Engineering, 2Department of Nematology and 3Department of Botany and Plant Sciences, University of California, Riverside, CA 92521, USA Associate Editor: Alex Bateman ABSTRACT Motivation: Similarity clustering of next-generation sequences (NGS) is an important computational problem to study the population sizes of DNA/RNA molecules and to reduce the redundancies in NGS data.
Currently, most sequence clustering algorithms are limited by their speed and scalability, and thus cannot handle data with tens of millions of reads.
Results: Here, we introduce SEEDan efficient algorithm for clustering very large NGS sets.
It joins sequences into clusters that can differ by up to three mismatches and three overhanging residues from their virtual center.
It is based on a modified spaced seed method, called block spaced seeds.
Its clustering component operates on the hash tables by first identifying virtual center sequences and then finding all their neighboring sequences that meet the similarity parameters.
SEED can cluster 100 million short read sequences in <4 h with a linear time and memory performance.
When using SEED as a preprocessing tool on genome/transcriptome assembly data, it was able to reduce the time and memory requirements of the Velvet/Oasis assembler for the datasets used in this study by 6085% and 2141%, respectively.
In addition, the assemblies contained longer contigs than non-preprocessed data as indicated by 1227% larger N50 values.
Compared with other clustering tools, SEED showed the best performance in generating clusters of NGS data similar to true cluster results with a 2-to 10-fold better time performance.
While most of SEEDs utilities fall into the preprocessing area of NGS data, our tests also demonstrate its efficiency as stand-alone tool for discovering clusters of small RNA sequences in NGS data from unsequenced organisms.
Availability: The SEED software can be downloaded for free from this site: http://manuals.bioinformatics.ucr.edu/home/seed.
Contact: thomas.girke@ucr.edu Supplementary information: Supplementary data are available at Bioinformatics online Received on April 11, 2011; revised on July 11, 2011; accepted on July 23, 2011 1 INTRODUCTION In recent years, the data volumes generated by next-generation sequencing (NGS) technologies have been growing at a pace that has now begun to greatly challenge the data processing and storage capacities of modern compute systems (Medini et al., 2008).
Only 4 years ago, NGS technologies like Illuminas reversible terminator To whom correspondence should be addressed.
method or ABIs ligation approach created 1 billion bases of DNA sequence information per instrument run which has now increased to over 300 billion bases per run with even shorter turnaround times (Holt and Jones, 2008).
This corresponds approximately to a 4-fold increase of sequence data output per year.
As a result of this rapid improvement of the technology, many exciting sequencebased research applications have evolved recently.
These include genome resequencing of entire organism populations, personalized medicine, RNA-Seq, ChIP-Seq and many others (1000 Genomes Project Consortium et al., 2010; Jothi et al., 2008).
Processing and storing the large amounts of data produced by these technologies is a major challenge for modern genome research.
Thus, it is important to develop methods that can improve the efficiency of the analysis workflows for NGS data.
To mention just a few, these include algorithms for processing the data more time and space efficiently (Langmead et al., 2009; Li and Durbin, 2009a; Li et al., 2009b) as well as data reduction approaches that aim to retain only the scientifically relevant and non-redundant information from NGS projects rather than everything (Leinonen et al., 2010).
For example, in genome resequencing projects one can greatly reduce the dataset sizes by storing only genetic variations, while removing the bulk of the sequence information that only confirms what is already known (Fritz et al., 2011).
Similarly, in quantitative NGS experiments for profiling pools of mRNAs, small RNAs or proteinDNAinteractions one can convert the data to much less storage intensive tag counts at an early stage of the analysis workflow.
Solutions that prevent or greatly minimize information loss are always preferred.
However, with the current growth rates of NGS data many of them may soon become impractical, especially when the data sizes become the main time and financial bottleneck for conducting scientific experiments in the NGS field.
This study introduces a new algorithm capable of clustering NGS sets in size ranges of several hundred million entries using a modified spaced seed method (Lin et al., 2008; Ma et al., 2002).
This method, hereafter referred to as SEED, efficiently joins sequences into clusters with user-definable similarity parameters ranging from 0 to 3 mismatches and overhanging ends with up to 3 nt in length.
These mismatch features are important to make the method less sensitive to base call errors, imprecise molecular cleavage events or inaccurate adaptor trimming.
The main utilities of SEED are the identification, enumeration and removal of redundant sequences in NGS data.
In its current implementation, SEED is designed to function as a short read clustering tool with controllable mismatch parameters, but not as an error corrector like FreClu (Qu et al., 2009).
There are several practical applications of this clustering approach.
First, the method can be used to reduce the complexity in NGS data by collapsing redundant reads to a single The Author(s) 2011.
Published by Oxford University Press.
This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/2.5), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.
[09:52 19/8/2011 Bioinformatics-btr447.tex] Page: 2503 25022509 SEED center sequence along with its frequency information.
While this data reduction step results only in a minor information loss, it can greatly improve the run time, memory requirements, and quality of genome and transcriptome assemblies.
Second, it can be used to determine the sequence diversity in quantitative NGS profiling datasets, such as RNA-Seq and ChIP-Seq, by enumerating very similar reads.
The resulting numbers of unique versus redundant reads can be an important parameter for identifying technical problems in these datasets (e.g.low reproducibility due to bias in PCR amplification steps).
Third, the method can be applied to discover clusters of microRNAs (miRNAs) directly from NGS data without the requirement of mapping the reads to a reference genome which is particularly important when working with unsequenced organisms (Johnson et al., 2009; Montgomery et al., 2008).
While in the past decade there has been extensive research on sequence family clustering for handling datasets in the range of hundreds of thousand entries (e.g.Li and Godzik, 2006), there has been very limited development of methods for clustering the much larger sequence volumes from NGS experiments with hundreds of millions of entries.
The short list of tools capable of clustering data sizes in the range of at least several million sequences includes UCLUST and FreClu (Edgar, 2010; Qu et al., 2009).
Most other clustering tools in this area are designed to solve problems related to EST analysis, such as pre-clustering of ESTs to facilitate their downstream assemblies (Hazelhurst et al., 2008; Huang and Madan, 1999; Picardi et al., 2009; Rao et al., 2010).
In the following, we first describe the theory behind the SEED clustering algorithm as well as the design of its software implementation.
We then illustrate and discuss its time, memory and accuracy performance by using both simulated and real NGS datasets.
The real datasets were specifically chosen to evaluate the algorithms efficiency for several application areas, including complexity reduction of RNA-Seq profiling experiments in the absence of a reference, prediction of mature miRNAs, and transcriptome and genome assemblies.
2 METHODS 2.1 Overview of the algorithm To cluster NGS by similarity, SEED indexes the reads by using the open hashing technique and a special class of spaced seeds (Lin et al., 2008), called block spaced seed.
Once the reads are stored in hash tables, SEED clusters them by first creating a virtual center sequence for each cluster and then finding all the reads that are within a certain similarity threshold to the center sequence.
The following is a short overview of the algorithm.
More details are provided in the next subsections.
A. Indexing (1) Initialize the indexing if the longest and the shortest read sequences do not differ by more than five bases in length.
(2) Use the first seed in a chosen set of block spaced seeds to hash the sequences into a hash table.
(3) Repeat step A.2 with each block spaced seed of the set and store their results in separate hash tables.
B. Clustering (1) Select an arbitrary sequence, identify for it all sequences within twice the mismatch threshold and compute their virtual center sequence.
(2) Find for the virtual center sequence all sequences with the allowed number of overhanging bases and mismatches.
Then remove these sequences from the hash tables.
(3) Repeat steps B.1 to B.2 until the hash tables are empty.
2.2 Indexing and hash tables Spaced seeds were introduced by Ma et al.(2002) as a time-efficient method for sequence similarity searching.
Several NGS alignment tools are based on this method.
These include Eland (Anthony J. Cox, unpublished data), MAQ (Li et al., 2008), SeqMap (Jiang and Wong, 2008) and ZOOM (Lin et al., 2008).
The general framework of spaced seeds can be summarized as follows.
A spaced seed of length l is a binary string of l bits.
When the seed is used in matching a query string of length l with another string, the bit 1 demands a match while the bit 0 tolerates a mismatch.
Such a seed can also be conveniently used to index sequences of length l in hashing.
For example, the spaced seed 01110 will file the sequences CAAAG and TAAAA into the same bucket, as well as all other 5mers with an AAA in the middle.
The weight w of a spaced seed is its number of 1s.
It directly affects the size of the hash tables in the above indexing scheme, and thus memory usage.
The parameter k is usually a predefined value, and the size of a set of spaced seeds is denoted as c. The details of designing a set of spaced seeds with full search sensitivity for given values of l,w,k will be discussed in Section 2.4.
The hash table data structure used in SEED is shown in Supplementary Figure S1.
Each hash table corresponds to a spaced seed, and each bucket in it corresponds to a word of w bases.
A bucket consists of a header and a dynamically allocated array of pointers.
The header points to an array, and each pointer in the array
