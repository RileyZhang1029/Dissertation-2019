            G:\fpp\tex\journals\oup\BioInfo\Bioinfo-25(22)issue\btp493.dvi [09:28 4/11/2009 Bioinformatics-btp493.tex] Page: 3005 30053011 BIOINFORMATICS ORIGINAL PAPER Vol.
25 no.
22 2009, pages 30053011doi:10.1093/bioinformatics/btp493 Databases and ontologies Mobyle: a new full web bioinformatics framework Bertrand Nron1,, Herv Mnager1,, Corinne Maufrais1, Nicolas Joly1, Julien Maupetit2, Sbastien Letort3, Sbastien Carrere3, Pierre Tuffery4 and Catherine Letondal1, 1Groupe Logiciels et Banques de Donnes, Institut Pasteur, 28, rue du Dr Roux, 75724 Paris Cedex, 2UMR-S 936, RPBS, Universit Paris Diderot-Paris7, 75205 Paris Cedex 13, 3Laboratoire Interactions Plantes Micro-organismes (LIPM) UMR441/2594, INRA/CNRS F-31320 Castanet Tolosan and 4UMR-S 973, RPBS, Universit Paris Diderot-Paris7, 75205 Paris Cedex 13, France Received on April 17, 2009; revised on July 10, 2009; accepted on July 30, 2009 Advance Access publication August 17, 2009 Associate Editor: Alfonso Valencia ABSTRACT Motivation: For the biologist, running bioinformatics analyses involves a time-consuming management of data and tools.
Users need support to organize their work, retrieve parameters and reproduce their analyses.
They also need to be able to combine their analytic tools using a safe data flow software mechanism.
Finally, given that scientific tools can be difficult to install, it is particularly helpful for biologists to be able to use these tools through a web user interface.
However, providing a web interface for a set of tools raises the problem that a single web portal cannot offer all the existing and possible services: it is the user, again, who has to cope with data copy among a number of different services.
A framework enabling portal administrators to build a network of cooperating services would therefore clearly be beneficial.
Results: We have designed a system, Mobyle, to provide a flexible and usable Web environment for defining and running bioinformatics analyses.
It embeds simple yet powerful data management features that allow the user to reproduce analyses and to combine tools using a hierarchical typing system.
Mobyle offers invocation of services distributed over remote Mobyle servers, thus enabling a federated network of curated bioinformatics portals without the user having to learn complex concepts or to install sophisticated software.
While being focused on the end user, the Mobyle system also addresses the need, for the bioinfomatician, to automate remote services execution: PlayMOBY is a companion tool that automates the publication of BioMOBY web services, using Mobyle program definitions.
Availability: The Mobyle system is distributed under the terms of the GNU GPLv2 on the project web site (http://bioweb2.pasteur.fr/ projects/mobyle/).
It is already deployed on three servers: http://mobyle.pasteur.fr, http://mobyle.rpbs.univ-paris-diderot.fr and http://lipm-bioinfo.toulouse.inra.fr/Mobyle.The PlayMOBY companion is distributed under the terms of the CeCILL license, and is available atContact: mobyle-support@pasteur.fr; mobyle-support@rpbs.univ-paris-diderot.fr; letondal@pasteur.fr Supplementary information: Supplementary data are available at Bioinformatics online.
To whom correspondence should be addressed.
The authors wish it to be known that, in their opinion, the first two authors should be regarded as joint First Authors.
1 INTRODUCTION Over the last 10 years, an increasing number of bioinformatics tools, covering a growing spectrum of applications, including aspects of genomics, systems and structural biology have been made available to the community.
The complexity of analyses undertaken in these domains makes the publication, integration and interconnection of these tools particularly challenging.
Several systems propose a solution to automate the access to bioinformatics resources.
Web-based user interfaces, such as the Biology Workbench (Subramaniam, 1998), PISE (Letondal, 2001), wEMBOSS (Sarachu and Colet, 2005), Galaxy (Giardine et al., 2005), GenePattern (Reich et al., 2006), MOWServ (Navas-Delgado et al., 2006), the New Generation Biology Workbench (Rifaieh et al., 2007), BioManager (Cattley and Arthur, 2007) and BioExtract (Lushbough et al., 2008), simplify the access to powerful computer resources by providing a familiar graphical-based environment for inexperienced users and by saving them from installing software on their own computer.
In contrast with these tools which focus on the execution of programs, and where the users can often interactively chain analyses, GBrowse MOBY (Wilkinson, 2006) and Seahawk (Gordon and Sensen, 2007b) propose data-centric solutions where the user can explore a set of BioMOBY (Wilkinson, 2004) services to analyse a set of given data, with edition, navigation and visualization components which fully exploit the composite nature of BioMOBY objects.
Standalone workflow systems such as Taverna (Oinn et al., 2004), Kepler (Altintas et al., 2004) or BioSide (Hallard et al., 2004) enable to combine tools within desktop applications, using graphically specified workflows.
It is hence possible, for bioinformaticians, to organize and automate complex data processing.
Such possibilities have also been offered on web interfaces, either in dedicated systems such as Remora (Carrere and Gouzy, 2006), or within some of the web-based systems cited above.
PISE, Galaxy and BioExtract also offer the possibility to save interactively designed protocols.
Many of these systems now offer the possibility of accessing distributed resources, often using dedicated web-service solutions such as BioMOBY and SoapLab (Senger et al., 2003).
While SoapLab offers a system to automate the distribution of asynchronous analytical services, the BioMOBY protocol provides in addition more detailed descriptions, including semantic metadata and a registration system to facilitate the discovery of relevant resources.
A number of tools facilitates the publication and The Author(s) 2009.
Published by Oxford University Press.
This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/2.5/uk/) which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.
[09:28 4/11/2009 Bioinformatics-btp493.tex] Page: 3006 30053011 B.Nron et al.management of BioMOBY services, such as MoSeS (http://biomoby.open-bio.org/CVS_CONTENT/moby-live/Java/docs/ Moses-generators.html) and the BioMOBY dashboard (http://biomoby.open-bio.org/CVS_CONTENT/moby-live/Java/docs/ Dashboard.html).
Many of the existing user interfaces rely on the descriptions provided by these systems to generate user interfaces: Ajax Command Definition from EMBOSS (Rice et al., 2000), BioMOBY or even pure WSDL definitions.
Mobyle is a generic web-based framework.
While including advanced technologies such as web services, remote execution and dataflow mechanisms, it addresses major end-user concerns arising from the use of sophisticated bioinformatics systems.
A recent study (Gordon and Sensen, 2007a) shows how simple issues in the user interface can impede the use of a system by scientists, causing them to waste time and even preventing them from using it further.
To address this issue, the design of Mobyles interface is user-centered, to provide a usable yet customizable access to a large panel of services, from genome analysis to structural bioinformatics.
The description language it uses to generate user interfaces is sufficiently extensive and flexible for rich user interfaces to be generated.
Its core partly relies on concepts previously embedded in PISE and the RPBS portal (Alland et al., 2005).
Moreover, different Mobyle servers can be federated to integrate services distributed over various sites.
This functionality enables the federation of a network of curated portals, combining the skills of each of them.
The Mobyle program description language also enables to define web services, as shown by the PlayMOBY Mobyle companion tool, which automates the publication of BioMOBY web services, and has monitoring capabilities that provide the bases for service quality monitoring.
2 SYSTEM DESIGN The Mobyle design process was based on a user-centered design process (Javahery et al., 2004; Letondal and Amanatian, 2004; Shachak et al., 2007), involving numerous interviews and a number of users workshops (see Section 4.1).
We identified the major end-user concerns that needed to be addressed: (1) An integrated bioinformatics framework needs to provide end users with several important capabilities: (i) reuse of data and results without the burden of unsafe copyand-paste operations; (ii) management of scientific studies (e.g.retrieving parameters of a job, comparing results or relaunching an analysis using different data); and (iii) access to a wide range of local or remote services within a unique user interface.
(2) A bioinformatics framework should enable scientists to share knowledge: (i) on setting up analyses, through tutorials based on curated examples; (ii) by accessing protocols designed and validated by experts in the domain; and (iii) through the use of a confidence network, allowing the interconnection of distributed resources, taking advantages of local skills to improve service quality, instead of favouring centralized platforms.
Technical requirements for such criteria to be satisfied include: (i) a well-designed web user interface, enabling easy navigation and data management within a user workspace; (ii) a distributed architecture, enabling access to and combined use of local and remote services; (iii) workflow authoring and enacting tools to support protocols; (iv) sound software architecture and APIs, to simplify system maintenance, configuration and extension; (v) a flexible description language to enable domain-specific adaptation needs, including visualization of results using special-purpose graphics components.
3 SYSTEM OVERVIEW In this section, we provide an overview of Mobyle.
We describe the underlying concepts of the system, the design of the web user interface, the server components and the distributed architecture.
3.1 Concepts 3.1.1 Homogeneous user interfaces to heterogeneous programs The steep learning curve involved in the use of command-line tools invocation is problematic for inexperienced users (Shneiderman, 1983).
A classical solution involves wrapping each application in a custom CGI script and providing a web interface to reduce the burden of remembering the syntax of the command line and the name of the parameters.
Given the sheer number of bioinformatics software programs available, we chose to automate the generation of web interfaces using an abstract definition of a programs parameters.
This solution provides a homogeneous interface to all the programs, minimizing the syntactic complexity.
It is also helpful in file management issues and program chaining.
3.1.2 Persistent user workspaces One of the shortcomings of the PISE environment is its lack of support for a persistent user workspace (Gilbert, 2002).
The new system, while still allowing a fast and temporary guest access to the programs, also gives to the users the possibility to create registered accounts, which allows user data and jobs to be maintained and managed across multiple work sessions.
3.1.3 XML description of interfaces Based on feedback from PISE server administrators, as well as the need to extend the capacity of functionalities such as web service wrapping or workflow management, we modified the schema that describes the system.
All Mobyle data, including program descriptions, job definitions and user workspaces are stored in XML documents.
The main element of the system, the program description, is inherited from the PISE system.
It describes various aspects, in a language that targets simplicity as much as possible (experience shows that the authoring and maintenance of program descriptions is a complex and tedious task).
Aspects covered include: Program/service documentation: describes the accomplished task and guides users through the process.
It also provides authoring and version informations.
Data typing: characterizes the parameters and results of the different programs.
Further details are provided in Section 3.3.
Wrapping instructions: translates a user request into a valid execution of the program (e.g.in the case of a unix program call, the construction of the command line will be defined by rules included in the XML file).
User interface layout: the layout of the program invocation form and job result pages are by default automatically generated from the XML definition, but can be customized.
3006 [09:28 4/11/2009 Bioinformatics-btp493.tex] Page: 3007 30053011 Mobyle Fig.1.
Web user interface: portal overview, displaying the multiple alignment CLUSTALW submission form.
The form in the main part displays a control, the databox, where the user can either paste data, enter a database ID or upload a file.
The user can also select a previously uploaded file from the File bookmarks menu.
When available, results from previous jobs are also provided through a Results menu.
BioMoby integration: the XML files can be enriched with metadata such as BioMoby parameter types, which permits the publication of a program as a BioMoby service using PlayMOBY (see Section 3.6).
A formal description of the XML grammar used to describe Mobyle programs is available on the project webpage (see http://bioweb2.pasteur.fr/projects/mobyle/downloads.html), using Relax NG (Clark et al., 2001).
3.1.4 Network-enabled bioinformatics tools The Mobyle system aims at acting as a hub for a set of programs of interest.
A program integrated in Mobyle can not only be local but also remote, using the Mobyle Net functionality (further described in Section 3.5).
Additionally, current and future developments aim at providing gateways to web-service-based systems such as BioMOBY (see Section 3.6).
The interest is to provide a unified framework for bioinformatics platforms maintainers, who have to publish and integrate various local or remote programs for both biologists and bioinformaticians.
3.2 User interface design Mobyle provides the scientist with a global and integrated view of all the elements needed to perform his or her analyses.
At one glance, the user can see which programs are available and which analyses have already been run.
The portal is organized in three main parts (Fig.1): a left navigation panel, a central panel displaying a selection of elements of the current work, such as forms and results, and horizontal tabs enabling the user to navigate between these elements.
3.2.1 Program search Available programs are classified so that they can be searched, using program and parameter names, prompts and documentation, or bibliographic
